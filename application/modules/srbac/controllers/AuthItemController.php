<?php

/**
 * ManageController class file.
 *
 * @author Louis DaPrato <l.daprato@gmail.com>
 */

class AuthItemController extends SBaseController
{

	/**
	 * @var CActiveRecord the currently loaded data model instance.
	 */
	private $_model;

	public function filters()
	{
		return array_merge(
				parent::filters(),
				array(
					array(
							'ext.EForwardActionFilter.EForwardActionFilter',
							'map' => array(
									'authItem' => array('read + get', 'create + post', 'update + put', 'delete + delete'),
							)
					),
					array(
						'ext.ERequestMethodFilter.ERequestMethodFilter',
						'config' => array(
								'get' => 'index, read',
								'put' => 'update',
								'post' => 'create',
								'delete' => 'delete',
								'ajax' => 'ajax'
						)
					),
				)
		);
	}

	/**
	 * Displays the authitem manage page
	 */
	public function actionIndex()
	{
		if(Yii::app()->getRequest()->getIsAjaxRequest())
		{
			if(isset($_GET['ajax']))
			{
				$this->actionAjax($_GET['ajax']);
			}
		}
		else
		{
			$params = array(
					'manualGridModel' => new AuthItem('search'),
					'manualFormModel' => new AuthItem(),
					'autoGeneratedGridModel' => new AuthItem('search'),
					'autoMissingGridModel' => new AuthItem('search'),
					'autoObsoleteGridModel' => new AuthItem('search'),
					'automaticFormModel' => new AuthItem(),
			);
			$params['autoGeneratedGridModel']->generated = true;
			$params['autoMissingGridModel']->generated = true;
			$params['autoObsoleteGridModel']->generated = true;
			$params['autoObsoleteGridModel']->obsolete();
			$params['automaticFormModel']->generated = true;
			$params['dataProvider'] = new CArrayDataProvider($params['autoMissingGridModel']->filter($this->getModule()->generateAuthItems()), array('sort' => array('attributes' => array('name'))));
			$this->render('index', $params);
		}
	}

	public function actionAjax($ajax)
	{
		switch($ajax)
		{
			case 'authItem-grid':
				$path = 'partials/_authItemGrid';
				$params = array(
						'model' => new AuthItem('search'),
						'gridId' => 'authItem-grid',
						'formId' => 'authItem-form'
				);
				break;
			case 'autoGeneratedAuthItem-grid':
				$path = 'partials/_authItemGrid';
				$params = array(
						'model' => new AuthItem('search'),
						'gridId' => 'autoGeneratedAuthItem-grid',
						'deleteSuccessJS' => '$("#autoMissingTab").trigger("update");$("#autoObsoleteTab").trigger("update");',
						'formId' => 'automaticAuthItem-form'
				);
				$params['model']->generated = true;
				break;
			case 'autoMissingAuthItem-grid':
				$path = 'partials/_authItemGrid';
				$params = array(
						'model' => new AuthItem('search'),
						'gridId' => 'autoMissingAuthItem-grid',
						'formId' => 'automaticAuthItem-form'
				);
				$params['model']->generated = true;
				$params['dataProvider'] = new CArrayDataProvider($params['model']->filter($this->getModule()->generateAuthItems()), array('sort' => array('attributes' => array('name'))));
				break;
			case 'autoObsoleteAuthItem-grid':
				$path = 'partials/_authItemGrid';
				$params = array(
						'model' => new AuthItem('search'),
						'gridId' => 'autoObsoleteAuthItem-grid',
						'deleteSuccessJS' => '$("#autoGeneratedAuthItem-grid").yiiGridView("update");',
						'formId' => 'automaticAuthItem-form'
				);
				$params['model']->generated = true;
				$params['model']->obsolete();
				break;
			case 'authItem-form':
				if(!isset($this->_model))
				{
					$this->_model = new AuthItem();
				}
				$path = 'partials/_authItemForm';
				$params = array(
						'model' => $this->_model,
						'updateGridIds' => 'authItem-grid',
						'formId' => 'authItem-form'
				);
				break;
			case 'automaticAuthItem-form':
				if(!isset($this->_model))
				{
					$this->_model = new AuthItem();
				}
				$this->_model->generated = true;
				$path = 'partials/_authItemForm';
				$params = array(
						'model' => $this->_model,
						'updateGridIds' => array('autoGeneratedAuthItem-grid', 'autoMissingAuthItem-grid', 'autoObsoleteAuthItem-grid'),
						'formId' => 'automaticAuthItem-form'
				);
				break;
			case 'autoObsoleteTab':
				$path = 'partials/tabs/_obsolete';
				$params = array('model' => new AuthItem('search'));
				$params['model']->generated = true;
				$params['model']->obsolete();
				break;
			case 'autoMissingTab':
				$path = 'partials/tabs/_missing';
				$params = array('model' => new AuthItem('search'));
				$params['model']->generated = true;
				$params['dataProvider'] = new CArrayDataProvider($params['model']->filter($this->getModule()->generateAuthItems()), array('sort' => array('attributes' => array('name'))));
				break;
			default:
				return;
		}
		$this->renderPartial($path, $params);
	}

	public function actionAuthItem()
	{
		// Placeholder action for creating restful like behavior when request are made to this route.
		// See EForwardActionFilter configuration to see where this action will be forwarded based on request method.
	}

	/** Begin custom auth item actions **/

	/**
	 * Creates a new model.
	 * If creation is successful, the browser will be redirected to the 'show' page.
	 */
	public function actionCreate()
	{
		if(isset($_POST['AuthItem']))
		{
			$this->_model = new AuthItem;
			$this->_model->setAttributes($_POST['AuthItem']);
			try
			{
				if($this->_model->save())
				{
					Yii::app()->getUser()->setFlash($this->getModule()->flashKey, '"'.$this->_model->getAttribute('name').'" ' .Yii::t('srbac', 'Authorization item created successfully.'));
				}
			}
			catch (CDbException $exc)
			{
				Yii::app()->getUser()->setFlash($this->getModule()->flashKey, Yii::t('srbac', 'Error while creating the authorization item.') . '<br />');
			}
		}
		else
		{
			if(isset($_POST['AuthItems']))
			{
				$success = true;
				try
				{
					foreach($_POST['AuthItems'] as $attributes)
					{
						$this->_model = new AuthItem;
						$this->_model->setAttributes($attributes);
						if(!$this->_model->save())
						{
							$success = false;
						}
					}
				}
				catch (CDbException $exc)
				{
					$success = false;
				}
				Yii::app()->getUser()->setFlash(
					$this->getModule()->flashKey,
					($success ? Yii::t('srbac', 'All authorization items were created successfully.') : Yii::t('srbac', 'An error occurred while creating one or more authorization item(s).')) . '<br />'
				);
				$this->_model = new AuthItem;
			}
		}

		if(Yii::app()->getRequest()->getIsAjaxRequest())
		{
			if(isset($_GET['ajax']))
			{
				$this->actionAjax($_GET['ajax']);
			}
		}
		else
		{
			$this->render('index', array('gridModel' => new AuthItem('search'), 'formModel' => $this->_model));
		}
	}

	public function actionRead($id = null)
	{
		if(empty($id))
		{
			$this->_model = new AuthItem();
			$this->_model->setAttributes($_GET);
		}
		else
		{
			$this->_model = AuthItem::model()->findByPk($id);
		}

		if($this->_model === null)
		{
			throw new CHttpException(404, Yii::t('srbac', 'The authorization item with ID {id} could not be found.', array('{id}' => $id)));
		}

		if(Yii::app()->getRequest()->getIsAjaxRequest())
		{
			if(isset($_GET['ajax']))
			{
				$this->actionAjax($_GET['ajax']);
			}
		}
		else
		{
			$this->render('index', array('gridModel' => new AuthItem('search'), 'formModel' => $this->_model));
		}
	}

	public function actionUpdate()
	{
		$params = Yii::app()->getRequest()->getRestParams();

		if(!isset($params['AuthItem']) || !isset($params['AuthItem']['id']))
		{
			throw new CHttpException(400, Yii::t('srbac', 'The ID of the authorization item being updated must be specified.'));
		}

		$this->_model = AuthItem::model()->findByPk($params['AuthItem']['id']);
		if($this->_model === null)
		{
			throw new CHttpException(404, Yii::t('srbac', 'The authorization item requested to update could not be found.'));
		}
		$this->_model->setAttributes($params['AuthItem']);

		try
		{
			if ($this->_model->save())
			{
				Yii::app()->getUser()->setFlash($this->getModule()->flashKey, '"'.$this->_model->name.'" '.Yii::t('srbac', 'Authorization item updated successfully.'));
			}
		}
		catch (CDbException $exc)
		{
			Yii::app()->getUser()->setFlash($this->getModule()->flashKey, Yii::t('srbac', 'Error while updating the authorization item.') . '<br />');
		}

		if(Yii::app()->getRequest()->getIsAjaxRequest())
		{
			if(isset($_GET['ajax']))
			{
				$this->actionAjax($_GET['ajax']);
			}
		}
		else
		{
			$this->render('index', array('gridModel' => new AuthItem('search'), 'formModel' => $this->_model));
		}
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'list' page.
	 */
	public function actionDelete()
	{
		$params = Yii::app()->getRequest()->getRestParams();

		if(isset($params['id']))
		{
			try
			{
				$rowsDeleted = AuthItem::model()->deleteByPk($params['id']);
				Yii::app()->getUser()->setFlash($this->getModule()->flashKey, Yii::t('srbac', '{rowsDeleted} authorization item(s) deleted.', array('{rowsDeleted}' => $rowsDeleted)) . '<br />');
			}
			catch (CDbException $exc)
			{
				Yii::app()->getUser()->setFlash($this->getModule()->flashKey, Yii::t('srbac', 'Error while deleting the authorization item(s).') . '<br />');
			}
		}

		if(Yii::app()->getRequest()->getIsAjaxRequest())
		{
			if(isset($_GET['ajax']))
			{
				$this->actionAjax($_GET['ajax']);
			}
		}
		else
		{
			$this->render('index', array('gridModel' => new AuthItem('search'), 'formModel' => new AuthItem()));
		}
	}

	public function generateGridUpdateJS($gridIds)
	{
		if(!is_array($gridIds))
		{
			$gridIds = array($gridIds);
		}
		array_walk($gridIds, create_function('&$gridId', '$gridId = \'$("#\'.$gridId.\'").yiiGridView("update");\';'));
		return implode('', $gridIds);
	}

}
