%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Administrator) ()
%%Title: (bars_arrows_3d.eps)
%%CreationDate: 2/25/2009 11:22 AM
%%BoundingBox: 71 18 3429 3475
%%HiResBoundingBox: 71.6514 18.4414 3428.3486 3474.8809
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_Cropmarks: 0 0 3500 3500
%AI3_TemplateBox: 1750.5 1749.5 1750.5 1749.5
%AI3_TileBox: 1452.3999 1362.4004 2047.5996 2137.6001
%AI3_DocumentPreview: Header
%AI5_ArtSize: 3500 3500
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -2009 4245 0.125 1059 922 26 0 0 1444 96 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 28.875 2 28.875 2 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
6 Bn
%AI5_BeginGradient: (Unnamed gradient 112)
(Unnamed gradient 112) 0 2 Bd
[
<
AEAEAEAEAEAEAEAFAFAFAFB0B0B0B0B0B0B1B1B2B2B2B2B3B3B3B4B4B5B5B5B5B6B7B7B7B7B8B9B9
B9B9BABBBBBCBDBDBDBEBFBFBFC0C1C1C2C2C3C3C4C5C6C6C6C7C8C8C9CACACBCCCCCDCECECFD0D1
D1D2D3D4D5
>
<
5B5B5B5B5B5B5A5C5C5C5C5C5C5D5D5D5D5E5E5E5E60605F5F616060626161636364646466656767
6669686A6A6B6B6D6C6E6E706F71717272747375777778787A797B7D7D7F8180828484868687898B
8B8D8F8E90
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000010202040303050507080809
0B0B0C0E0E
>
0
<
47474747474747474747464646464646464646454545454545454444444444444343434343424242
424241414141404040403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A393939383838373737
3636363535
>
<
919191919191919090909090908F8F8F8F8E8E8E8E8D8D8D8D8C8C8C8B8B8B8A8A89898988888787
8786868585848483838282818180807F7F7E7E7D7C7C7B7B7A7A7978787776767574747373727170
706F6E6E6D
>
<
E0E0E0E0E0E0DFDFDFDFDFDEDEDEDDDDDDDCDCDCDBDBDBDADAD9D9D8D8D7D7D6D6D5D5D4D4D3D2D2
D1D1D0CFCFCECDCDCCCBCACAC9C8C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBBBAB9B9B8B7B6B5B4B3B2
B1B0AFAEAD
>
4 %_Br
[
0.835294 0.564706 0.054902 0 0.207843 0.427451 0.678431 2 50 100 %_BS
%_0.835294 0.564706 0.054902 0 0.207843 0.427451 0.678431 2 50 100 Bs
0.682353 0.356863 0 0 0.278431 0.568627 0.878431 2 65.9341 0 %_BS
%_0.682353 0.356863 0 0 0.278431 0.568627 0.878431 2 65.9341 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 13)
(Unnamed gradient 13) 0 2 Bd
[
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001010102020203030303040404050505
06060607060607070708080809090909090A0A0A0B0B0B0C0B0D0C0C0D0D0F0F0F10101111111212
13131414141514161516161617171818191819191A1A1B1B1C1C1C1D
>
<
7D7D7D7D7D7D7D7F7F7F7F7E7E80808080808181818182828284848485858587878688888989898B
8B8C8C8E8E8E8F8F919192929494959596969797999A9A9C9C9D9D9E9F9FA1A2A2A3A3A4A5A5A7A8
A8A9AAAAABADADAEAFB1B1B2B3B5B5B6B7B8B8BABBBCBCBDBFC0C1C1C2C3C4C5C6C6C7C8C9CACBCC
CCCDCECFD0D1D2D3D4D5D6D6D7D8D9DBDCDDDEDFE0E1E2E3E4E5E6E7
>
<
FDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFDFDFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000001010101010101010101010101010101010101010101010202
02020202020202030303030303030303030304040404040404040505
>
<
FFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFAFA
FAFAFAF9F9F9F9F9F8F8F8F8F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F2F2F2F2F1F1F1F0F0F0
EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E4E4E4E3E3E2E2E2E1E1
E0E0DFDFDFDEDEDDDDDCDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D4D4
>
<
969696969696969595959595959494949494939393939292929191919090908F8F8F8E8E8D8D8D8C
8C8B8B8A8A8A898988888787868685858484838382818180807F7F7E7D7D7C7B7B7A7A7978787776
7675747473727271706F6F6E6D6C6C6B6A696968676666656463626261605F5E5D5D5C5B5A595857
57565554535251504F4E4D4D4C4B4A494847464544434241403F3E3D
>
<
13131313131313131313131313131313131314141414141414141414141414141414141515151515
15151515151515161616161616161616161717171717171717171718181818181818181919191919
1919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1F1F1F
1F1F1F20202020202121212121212222222222222323232323242424
>
4 %_Br
[
0.113725 0.905882 1 0.019608 0.831373 0.239216 0.141176 2 50 100 %_BS
%_0.113725 0.905882 1 0.019608 0.831373 0.239216 0.141176 2 50 100 Bs
0 0.490196 0.992157 0 1 0.588235 0.07451 2 65.9341 0 %_BS
%_0 0.490196 0.992157 0 1 0.588235 0.07451 2 65.9341 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 17)
(Unnamed gradient 17) 0 3 Bd
[
<
2C2D2D2E2E2F2F30313132333435353637373738383939393A3A3B3B3C3C3D3D3E3E3F3F40404141
42424343444444454545454646474748
>
<
FCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFBFBFBFBFAFAFAFAF9F9F9
F8F8F8F8F8F8F8F8F7F7F7F7F6F6F5F5
>
1
<
161718191A1B1C1D1D1E1F2122232425262728292A2B2C2D2E2F303234353637393A3B3C3E3F4041
4344454647494A4B4C4D4F5051535455
>
<
BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A2A1A09F9E9D9C9B9A999897
969594939291908F8E8D8C8B8A898887
>
0.113725
0
4 %_Br
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000001010101020202020303030304
040405050404050505070606060707070808080909090A0A0A0B0B0B0B0C0B0C0C0C0D0D0D0E0E0E
0F0F100F0F101010111112121213131314141515151616171718181819191A1A1B1B1B1C1C1C1C1D
1D1D1E1D1E1E1F1F202020202121212121222223232424252525252626272728282828292929292A
2A2B2B2B2B2C
>
<
7D7D7D7D7D7D7D7D7D7F7F7F7E7E7E7E808080808081818181818282828284848484858585878686
8888888989898B8B8B8C8C8C8E8E8F8F8F919092929293939494969697979898989A9A9B9B9C9C9E
9E9FA0A0A1A1A2A2A3A3A4A4A6A7A7A8A8A9ABAAACACADAEAEAFAFB1B2B2B3B4B4B6B7B7B8B9B9BB
BCBCBDBEBFBFC0C2C1C3C3C5C5C6C7C8C8C9C9CACACBCCCDCDCECFD0D1D1D2D3D4D5D5D6D7D8D9DA
DADBDCDDDEDFE0E0E0E2E3E4E5E6E7E7E8E8E9EAEBECEDEDEEEFF0F1F1F1F2F3F4F5F5F6F6F7F8F9
F9FAFAFBFCFC
>
<
FDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000001010101010101010101010101
01010101010202020202020202020202020203030303030303040404040404040505050505060606
0606070707070707080808080909090A0A0B0B0B0B0C0C0D0D0D0D0E0E0F0F101011111112121213
131414151516
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFB
FBFBFBFAFAFAFAFAFAF9F9F9F9F9F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F4F3F3F3F3F2
F2F2F1F1F1F1F0F0F0EFEFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E8E7E7E7E6E6E6
E5E5E4E4E4E3E3E3E2E2E1E1E1E0E0E0DFDFDEDEDEDDDDDCDCDBDBDBDADAD9D9D8D8D8D7D7D6D6D5
D5D5D4D4D3D3D2D2D1D1D0D0CFCFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C5C5C4C4C3C3C2
C2C1C1C0C0BF
>
<
969696969696969696959595959595959494949494939393939392929292919191919090908F8F8F
8E8E8E8D8D8D8C8C8C8B8B8B8A8A89898988888787878686858584848383828282818180807F7F7E
7E7D7C7C7B7B7A7A79797878777676757574737372727170706F6F6E6D6D6C6B6B6A696968676766
6565646362626160605F5E5D5D5C5B5A5A595857575655545453525150504F4E4D4C4C4B4A494847
4746454443424141403F3E3D3C3B3A3A393837363534333231302F2E2E2D2C2B2A29282726252423
2221201F1E1D
>
<
13131313131313131313131313131313131313131313131313121212121212121212121212121212
1212121212121111111111111111111111111111111111101010101010101010101010100F0F0F0F
0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0B
0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0909090909090909080808080808080807070707070707
07060606060606060505050505050504040404040404030303030303030202020202020201010101
010100000000
>
4 %_Br
[
0.282353 0.960784 1 0.333333 0.529412 0.113725 0 2 50 100 %_BS
%_0.282353 0.960784 1 0.333333 0.529412 0.113725 0 2 50 100 Bs
0.172549 0.988235 1 0.086275 0.74902 0.113725 0 2 50 81.3187 %_BS
%_0.172549 0.988235 1 0.086275 0.74902 0.113725 0 2 50 81.3187 Bs
0 0.490196 0.992157 0 1 0.588235 0.07451 2 66.4835 0 %_BS
%_0 0.490196 0.992157 0 1 0.588235 0.07451 2 66.4835 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 19)
(Unnamed gradient 19) 0 2 Bd
[
<
AEAEAEAEAEAEAEAEAEAFAFAFAFAFB0B0B0B0B1B1B1B1B1B1B2B2B2B3B3B3B4B4B4B4B5B5B5B5B6B6
B7B7B7B7B8B8B9B9B9B9BABABBBBBBBCBCBDBDBEBEBFBFC0C0C0C1C2C2C2C3C3C4C4C5C5C6C6C6C7
C8C8C9C9CACACBCBCCCDCDCECECED0D0D1D1D2D2D3D3D4D5D5D6D6D7D7D9D9D9DADBDCDCDDDEDEDF
DFE0E0E1E2E2E3E4E5E5E6E6E7E7E8E8E9EAEAEBEBECECEDEEEEEFEFF0F1F1F2F2F3F4F4F5F5F6F7
F7F8F9F9FAFAFBFBFBFCFDFDFEFFFEFFFFFFFFFFFFFF
>
<
5B5B5B5B5B5B5B5B5A5C5C5C5C5C5C5C5C5C5D5D5D5D5D5C5E5E5E5D5D605F5F5F5F606060606261
61616262626264636363656564666666686767676968686A6A696B6B6D6C6C6E6E6E6F6F6F717072
72727473757575777678787979797B7B7D7D7F7F808080828283838585878789888A8A8C8C8E8E90
8F9191939395949698989A9A9C9B9D9D9FA0A0A2A2A3A3A4A7A6A8A7A9ABAAACABADAFAEB0AFB1B2
B2B3B5B4B5B5B7B9B8B9BBBABBBDBCBDBFBEBFC1BFC1
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000001000102020404040406050707070909090A0C0A0C0D0F0E0F10121113131314
16161817191A1C1A1B1D1E201F2121242425252628292B2B2A2C2D2F2F303233343334363638393A
3B3C3D3F3F404041434444464747494A4B4C4D4E4F50
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000101
0101010101010101010202020202030303030304050506060607070809090A0B0C0B0C0D0D0E0F10
111213141515161618191A1B1C1D1F20212224252627
>
<
47474747474747474747464646464646464645454545454545444444444443434343434242424241
414141414040403F3F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3A3A3A39393938383837373736363635
35343434333332323231313030302F2F2E2E2D2D2D2C2C2B2B2A2A29292828282727262625252424
23232222212120201F1F1E1E1D1C1C1B1B1A1A1919181817161615151414131212111110100F0E0E
0D0D0C0B0B0A0A090808070606050504030302010100
>
<
9191919191919191919090909090909090908F8F8F8F8F8F8E8E8E8E8E8D8D8D8D8D8C8C8C8C8B8B
8B8B8A8A8A8A898989898888888787878686868685858584848483838282828181818080807F7F7E
7E7E7D7D7C7C7C7B7B7A7A797979787877777676757575747473737272717170706F6F6E6E6D6D6C
6C6B6B6A6A6969686767666665656464636262616160605F5E5E5D5D5C5B5B5A5A59585857575655
5554535352525150504F4E4E4D4C4C4B4A4A49484847
>
<
E0E0E0E0E0E0E0E0DFDFDFDFDFDFDEDEDEDEDEDDDDDDDDDCDCDCDCDBDBDBDBDADADAD9D9D9D8D8D8
D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C8C8C7C7C6C6C5C5
C4C3C3C2C2C1C0C0BFBFBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B3B2B1B0B0AFAEADADACABABAA
A9A8A7A7A6A5A4A4A3A2A1A0A09F9E9D9C9B9B9A99989796969594939291908F8E8E8D8C8B8A8988
8786858483838281807F7E7D7C7B7A79787776757473
>
4 %_Br
[
1 0.756863 0.313725 0.152941 0 0.278431 0.45098 2 50 100 %_BS
%_1 0.756863 0.313725 0.152941 0 0.278431 0.45098 2 50 100 Bs
0.682353 0.356863 0 0 0.278431 0.568627 0.878431 2 65.9341 0 %_BS
%_0.682353 0.356863 0 0 0.278431 0.568627 0.878431 2 65.9341 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
<
AEAEAEAEAEAEAEAEAEAFAFAFAFAFB0B0B0B0B1B1B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B7
B7B7B7B8B8B9B9B9BABABABBBBBBBCBCBDBEBEBEBFBFC0C1C1C1C2C2C2C3C3C4C5C5C5C6C7C7C7C8
C9C9C9CACBCBCCCCCDCDCFCFD0D0D0D1D1D2D3D4D4D5D5D6D6D7D8D8D9DADADBDCDDDEDEDFDFE0E0
E2E2E3E3E4E5E5E6E7E7E8E8E9EAEBEBECEDECEEEEEFF0F0F1F2F2F3F3F4F5F5F6F7F7F8F9F9FAFB
FBFBFCFCFDFEFEFFFFFFFFFFFFFFFFFFFFFF
>
<
5B5B5B5B5B5B5B5B5A5C5C5C5C5C5C5C5C5D5D5D5D5D5D5E5E5E5E5D60605F5F5F60606060626261
61636262626464636565656766666868676969696A6A6A6C6B6B6D6D6C6E6E706F6F717173727274
74757577777778787A7A7B7B7D7D7F7F7F8181828284848685878789898B8B8D8C8E909092929493
95959797999B9A9C9C9E9EA0A2A1A3A3A5A7A6A8A8AAACABADAFAEB0B0B1B3B2B4B6B5B6B8B7B9BA
BABCBDBCBEC0BFC0C1C1C2C3C3C4C6C7C7C8
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000010101030103050405060606080709090B0A0C0C0C0D0F0F0E1011131113
1416161617181A1B1B1B1D1E1F211F2122232526262728292A2B2D2E2E2E2F31323335363738393A
3A3B3C3D3E3F404142444545474849494B4C
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000010101
010101010101010202020202020302030303030404040506060708080809090A0B0C0D0E0E0F1011
1112121314151617191A1B1C1E1F20212223
>
<
47474747474747474747464646464646464645454545454544444444444443434343434242424241
414141404040403F3F3F3E3E3E3E3D3D3D3C3C3C3B3B3B3A3A3A3939393838383737373636353535
3434343333323232313130302F2F2F2E2E2D2D2C2C2B2B2B2A2A2929282827272626252524242323
2222212120201F1F1E1E1D1D1C1B1B1A1A19191818171616151514141312121111100F0F0E0E0D0C
0C0B0B0A0909080707060605040403020201
>
<
91919191919191919190909090909090908F8F8F8F8F8F8E8E8E8E8E8D8D8D8D8D8C8C8C8C8B8B8B
8B8A8A8A8A89898988888887878786868685858584848483838382828281818080807F7F7E7E7E7D
7D7C7C7B7B7B7A7A7979787877777676767575747473737272717170706F6F6E6E6D6C6C6B6B6A6A
69696868676666656564646362626161605F5F5E5E5D5C5C5B5A5A59595857575655555453535251
51504F4F4E4D4D4C4B4B4A49494847464645
>
<
E0E0E0E0E0E0E0E0DFDFDFDFDFDFDEDEDEDEDEDDDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D8D8D8D7
D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C7C7C6C6C5C5C4
C3C3C2C2C1C0C0BFBFBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B2B2B1B0B0AFAEADADACABAAAAA9
A8A7A6A6A5A4A3A2A2A1A09F9E9D9D9C9B9A9998989796959493929191908F8E8D8C8B8A89888786
868584838281807F7E7D7C7B7A7978777675
>
4 %_Br
[
1 0.784314 0.298039 0.137255 0.003922 0.270588 0.458824 2 50 100 %_BS
%_1 0.784314 0.298039 0.137255 0.003922 0.270588 0.458824 2 50 100 Bs
0.682353 0.356863 0 0 0.278431 0.568627 0.878431 2 65.9341 0 %_BS
%_0.682353 0.356863 0 0 0.278431 0.568627 0.878431 2 65.9341 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 9)
(Unnamed gradient 9) 0 2 Bd
[
<
7070707070707071717171717272727273737373747474757575767676777878787A7A7A7B7B7C7C
7D7D7E7E7F7F8080818182838384848586868888898A8A8B8C8C8D8E8E8F90909192939394959696
9798999A9A9B9C9D9E9E9E9FA0A1A2A2A3A4A5A6A6A7A8A9AAAAABACACADAEAEAFB0B1B2B3B4B4B5
>
<
0404040404040405050505050406060605070707060808070909080A0A090B0A0A0B0B0B0D0D0E0E
0F0F0E1010111112121313141415151718181A1A1B1B1C1D1D1E1E1F212021232224232526252728
29292A2B2B2C2D2D2D2E2F30303132333334353637373738393B3C3B3C3D3E3F4040414142434445
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFDFCFCFCFBFBFAFAF9F6F6F5F4F4F4
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000010101010101010101020202020203030303
04040404040505060606070707080809090A0B0B0C0C0D0D0E0F1010111213141516171718191A1B
>
<
9D9D9D9D9D9D9D9C9C9C9C9C9B9B9B9B9A9A9A9A9999999898989797979696959594949493939292
919190908F8F8E8E8D8D8C8B8B8A8A8988888787868585848383828181807F7F7E7D7C7C7B7A7979
78777675757473727171706F6E6D6C6C6B6A69686766656463636261605F5E5D5C5B5A5958575655
>
<
C8C8C8C8C8C8C8C7C7C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C3C3C3C2C2C2C1C1C1C0C0C0BFBFBEBE
BDBDBDBCBCBBBBBABAB9B9B8B8B7B7B6B5B5B4B4B3B3B2B1B1B0B0AFAEAEADACACABABAAA9A9A8A7
A6A6A5A4A4A3A2A1A1A09F9E9E9D9C9B9B9A9998979796959493929291908F8E8D8C8B8B8A898887
>
<
3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3B3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C
3C3C3C3C3C3C3C3C3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3D3E3E3E3E3E3E3E3E3E3E3E3E3E3E3F
3F3F3F3F3F3F3F3F3F3F3F3F40404040404040404040404141414141414141414141424242424242
>
4 %_Br
[
0.709804 0.270588 0.956863 0.105882 0.333333 0.529412 0.258824 2 50 100 %_BS
%_0.709804 0.270588 0.956863 0.105882 0.333333 0.529412 0.258824 2 50 100 Bs
0.439216 0.015686 1 0 0.615686 0.784314 0.231373 2 65.9341 0 %_BS
%_0.439216 0.015686 1 0 0.615686 0.784314 0.231373 2 65.9341 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
5 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient 2)
(Linear Gradient 2) 0 6 Bd
[
<
C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2
D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADA
DADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADBDBDADBDA
DADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6
>
<
3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E7072
7476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3
B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCF
CFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7
>
<
232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000
>
0
<
0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F1010
1111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F202020212122
22232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F30303131323232333334
3435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242
>
<
A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D
7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
>
<
C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9
C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCF
D0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2
>
4 %_Br
<
8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E
8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C
9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9
AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9
B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3
C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E1010121213131616
18181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5
D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4
A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C
59575553514E4D4A484644413F3C3A373633312E2C29282523
>
0
<
737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665
656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A5959585857575656555554545353
5252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E
3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827
272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F
0F0E0E0D0C0C0B0B0A09090807070606050404030302010100
>
<
F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEE
EDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBE
BEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACAC
ABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0
>
<
0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425
252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F40414142
4344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F6061626363
6465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F808182838485868687
88898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
4 %_Br
<
0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F3031
32343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A
5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575
757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282
>
<
444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18
181515141212100F0F0C0C0B09090606060404020201000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000
>
1
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2
B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D
8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473
>
<
BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECF
CFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDE
DFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDED
EEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8
>
<
00000000000101010101010101010102020202020202020203030303030303030304040404040404
04040405050505050505050505060606060606060606070707070707070707070808080808080808
0808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F
>
4 %_Br
0
<
9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A
6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444
>
1
0
1
<
7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4
A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF
>
0
4 %_Br
0
<
FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2
F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDE
DDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6
C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AE
AEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1
A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E
>
1
0
1
<
000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F202122232424
25262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444
454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E
5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F707070717172
72727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D
7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F
>
0
4 %_Br
[
0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS
%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs
0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS
%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs
0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS
%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs
0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS
%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs
0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS
%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs
0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS
%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 2)
(Radial Gradient 2) 1 6 Bd
[
0
<
FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2
F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDE
DDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6
C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AE
AEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1
A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E
>
1
0
1
<
000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F202122232424
25262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444
454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E
5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F707070717172
72727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D
7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F
>
0
4 %_Br
0
<
9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A
6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444
>
1
0
1
<
7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4
A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF
>
0
4 %_Br
<
0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F3031
32343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A
5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575
757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282
>
<
444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18
181515141212100F0F0C0C0B09090606060404020201000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000
>
1
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2
B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D
8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473
>
<
BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECF
CFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDE
DFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDED
EEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8
>
<
00000000000101010101010101010102020202020202020203030303030303030304040404040404
04040405050505050505050505060606060606060606070707070707070707070808080808080808
0808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F
>
4 %_Br
<
8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E
8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C
9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9
AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9
B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3
C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E1010121213131616
18181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5
D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4
A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C
59575553514E4D4A484644413F3C3A373633312E2C29282523
>
0
<
737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665
656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A5959585857575656555554545353
5252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E
3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827
272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F
0F0E0E0D0C0C0B0B0A09090807070606050404030302010100
>
<
F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEE
EDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBE
BEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACAC
ABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0
>
<
0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425
252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F40414142
4344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F6061626363
6465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F808182838485868687
88898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
4 %_Br
<
C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2
D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADA
DADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADBDBDADBDA
DADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6
>
<
3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E7072
7476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3
B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCF
CFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7
>
<
232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000
>
0
<
0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F1010
1111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F202020212122
22232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F30303131323232333334
3435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242
>
<
A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D
7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
>
<
C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9
C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCF
D0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2
>
4 %_Br
[
0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS
%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs
0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS
%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs
0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS
%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs
0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS
%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs
0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS
%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs
0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS
%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 20)
(Unnamed gradient 20) 0 2 Bd
[
<
AFAFAFAFAFAFAFB0B0B0B0B0B0B0B1B1B1B2B2B3B3B3B4B4B4B4B5B5B5B6B6B7B7B7B8B8B9BABABA
BBBBBCBCBCBDBDBFBFBFC0C1C1C2C2C3C4C4C4C6C6C7C7C8C8C9C9CBCBCCCDCDCFCFD0D0D1D2D3D4
D4D5D5D6D6D8D9D9DADBDBDDDDDEDFDFE0E1E1E3E4E4E5E6E6E7E8E9E9EBEBECEDEEEFEFF0F1F2F3
F3F4F5F6F7F8F9FAFAFBFCFCFDFDFEFFFFFFFFFFFFFFFF
>
<
5B5B5B5B5B5B5B5B5C5C5C5C5C5C5E5E5E5D5D5F5F5F5F6161606062626262636363656565666666
68686969696B6B6C6C6C6E6E6F6F717072727274737575777778787A7A7B7B7D7F7F818082828486
85878788888A8C8C8D8F8F9090929493959796989A999B9D9D9EA0A2A1A3A5A4A6A8AAA9ABADAFAE
B0B1B3B2B4B5B7B9B8B9BBBCBEBDBEC0C1C3C4C3C5C7C8
>
<
00000000000000000000000000000000000101000001010000020201030303030305040405050606
0507060707080809090A090B0A0C0B0D0C0E0E0F110F1110121113141414171516161719181A1B19
1B1C1C1D1F201E20212222222425242627272828292B2B2A2C2D2D2E302F2F313233333534353537
3839393B3C3D3C3D3E3F404142434445464748494A4B4C
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000001010101020202020203030303040404040505060506060707080808090A0A0B0C0C0C0D0E
0E0F1011121312131415161718191A1B1C1D1E20212223
>
<
51515151515151505050505050504F4F4F4F4E4E4E4E4D4D4D4D4C4C4C4B4B4B4A4A4A4949484848
47474646464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A3938383737363535343333
32323130302F2E2E2D2C2C2B2A29292827272625242423222121201F1E1D1D1C1B1A191918171615
1514131211100F0F0E0D0C0B0A09080707060504030201
>
<
8E8E8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8B8B8B8B8A8A8A8A89898989888888878787868686
85858484848383828282818180807F7F7E7E7E7D7D7C7C7B7B7A7A79797878777676757574747372
72717170706F6E6E6D6C6C6B6B6A6969686767666565646363626160605F5E5E5D5C5B5B5A595858
575655555453525151504F4E4D4D4C4B4A494848474645
>
<
CBCBCBCBCBCBCBCACACACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C5C5C5C4C4C3C3C3C2C2C1C1
C1C0C0BFBFBEBEBDBDBCBCBBBBBABAB9B9B8B8B7B6B6B5B5B4B4B3B2B2B1B0B0AFAFAEADADACABAB
AAA9A9A8A7A6A6A5A4A3A3A2A1A0A09F9E9D9D9C9B9A9999989796959494939291908F8E8E8D8C8B
8A89888786858584838281807F7E7D7C7B7A7978777675
>
4 %_Br
[
1 0.784314 0.298039 0.137255 0.003922 0.270588 0.458824 2 50 100 %_BS
%_1 0.784314 0.298039 0.137255 0.003922 0.270588 0.458824 2 50 100 Bs
0.686274 0.356863 0 0 0.317647 0.556863 0.796078 2 65.9341 0 %_BS
%_0.686274 0.356863 0 0 0.317647 0.556863 0.796078 2 65.9341 0 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Offset Squares Pattern)
(Offset Squares Pattern) 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa
 0.043137 0 0.713725 0 1 1 0.4 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.03125 29.4307 L
3.03125 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.89063 50.123 L
5.89063 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
*u
5.89063 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.89063 32.4961 L
5.89063 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa
 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.30566 48.793 L
8.30566 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa
 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.67578 L
28.9355 1.67578 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.95703 L
47.6777 4.95703 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.95703 L
30.0527 4.95703 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa
 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.50293 L
47.4199 6.50293 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa
 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.75293 26.1445 L
2.75293 2.16992 L
25.4316 2.16992 L
25.4316 26.1445 L
f
*U
*u
4.95605 7.40039 m
22.582 7.40039 L
22.582 25.0273 L
4.95605 25.0273 L
4.95605 7.40039 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa
 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.67383 m
4.95605 5.67383 L
4.95605 25.0273 L
22.582 25.0273 L
22.582 5.67383 L
f
20.3887 21.3281 m
7.58105 21.3281 L
7.58105 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa
 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.93555 8.73633 m
21.0371 8.73633 L
21.0371 22.8379 L
6.93555 22.8379 L
6.93555 8.73633 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa
 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa
 0.043137 0 0.713725 0 1 1 0.4 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa
 0 0.901961 0 0 1 0.2 0.6 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-6440.8833 9940.9551 m
-6349.0479 9940.9551 L
-6349.0479 9936.6758 L
-6440.8833 9936.6758 L
-6440.8833 9940.9551 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-6440.6631 9938.2754 m
-6441 9938.3418 -6440.4814 9938.5313 -6440.8833 9938.3887 C
-6440.8379 9938.2705 -6440.7725 9938.1816 -6440.6631 9938.2754 C
f
-6350.1675 9938.4414 m
-6351.2529 9939.2041 -6352.6816 9938.4336 -6353.8701 9938.9199 C
-6354.0098 9938.9521 -6353.8354 9938.502 -6354.1484 9938.6025 C
-6355.3008 9939.1953 -6357.1162 9938.8418 -6358.5195 9938.3848 C
-6358.4346 9938.2666 L
-6358.7021 9938.1816 -6359.0283 9938.5723 -6359.3115 9938.5176 C
-6359.3135 9938.4395 -6359.2207 9938.4063 -6359.2861 9938.2979 C
-6359.3574 9938.5352 -6359.7979 9938.4082 -6359.9189 9938.584 C
-6360.0303 9938.4922 -6360.0195 9938.3047 -6360.1641 9938.2002 C
-6360.3262 9938.4697 L
-6360.7769 9939.1094 -6361.4209 9938.4258 -6362.0361 9938.7559 C
-6362.0063 9938.6934 -6361.9453 9938.6445 -6361.9941 9938.584 C
-6362.9814 9938.9727 -6364.2168 9938.8994 -6365.3208 9939.043 C
-6365.2769 9938.9482 -6365.2363 9938.7754 -6365.3008 9938.668 C
-6365.3555 9938.9512 -6365.6963 9939.0225 -6365.9922 9939.0781 C
-6366.1255 9938.7871 -6366.4995 9939.3438 -6366.8467 9939.1826 C
-6366.8169 9939.1191 L
-6367.0732 9939.4238 -6367.1973 9938.9434 -6367.4053 9939.3086 C
-6367.5684 9939.0801 L
-6367.6807 9939.4902 -6367.9395 9938.8672 -6368.1514 9939.0762 C
-6368.1445 9939.1602 L
-6368.3442 9939.2598 -6368.4482 9939.0537 -6368.6338 9939.123 C
-6368.6514 9939.0762 L
-6369.0854 9939.1826 -6369.3379 9938.9551 -6369.3271 9939.2754 C
-6369.4795 9939.0186 -6368.9063 9939.1582 -6369.1455 9938.7842 C
-6370.5732 9939.1152 -6372.0459 9939.0498 -6373.4834 9939.0566 C
-6373.6465 9938.9277 -6373.7505 9938.8887 -6373.7871 9938.7666 C
-6373.9307 9938.832 -6374.3281 9938.8262 -6374.4585 9938.9902 C
-6374.4102 9938.9834 -6374.5513 9938.8262 -6374.6274 9938.8105 C
-6374.8887 9938.6895 -6374.9131 9939.1621 -6375.2002 9939.0186 C
-6375.0859 9938.9336 -6375.0469 9938.8301 -6375.0854 9938.7109 C
-6375.3301 9938.9609 -6375.6577 9938.9209 -6375.9473 9939.002 C
-6375.9023 9938.9482 -6375.8325 9938.916 -6375.8433 9938.8154 C
-6376.1602 9939.0986 -6376.4209 9938.7559 -6376.6982 9938.9346 C
-6376.5947 9938.75 L
-6377.0415 9938.5254 -6376.7266 9939.1367 -6377.1128 9939.0039 C
-6377.02 9938.9453 -6377.0527 9938.873 -6377.0361 9938.7979 C
-6377.3965 9939.1338 -6377.9795 9939.0225 -6378.3389 9939.1367 C
-6378.3174 9939.1113 -6378.3232 9939.0605 Y
-6378.7148 9939.1025 -6379.1245 9938.998 -6379.5552 9939.1445 C
-6379.7119 9939.0625 -6379.5039 9938.6934 -6379.9185 9938.7617 C
-6379.9033 9939.1328 -6380.6221 9938.9141 -6380.3779 9939.334 C
-6380.7319 9939.2734 -6381.2925 9939.1338 -6381.5283 9939.2598 C
-6381.3691 9939.1191 -6381.7007 9938.8066 -6381.4063 9938.7754 C
-6381.6289 9938.5498 L
-6381.5957 9938.3984 -6381.3999 9938.6016 -6381.4707 9938.4102 C
-6381.6182 9938.4258 -6382.0479 9938.5723 -6382.1797 9938.5117 C
-6382.4531 9938.7393 -6382.7041 9939.1641 -6383.1465 9939.2109 C
-6382.9385 9939.0664 -6383.2646 9938.8018 -6383.1235 9938.7383 C
-6383.7407 9939.4482 L
-6383.8877 9939.4658 -6383.7725 9939.1563 -6383.9854 9939.2529 C
-6383.9746 9939.3506 -6384.0674 9939.4121 -6384.1318 9939.4922 C
-6384.1875 9939.4482 -6384.7441 9939.584 -6384.8081 9939.2178 C
-6384.8735 9939.0762 -6384.5684 9939.1426 -6384.7314 9939.0117 C
-6385.0029 9939.0146 -6385.0151 9939.1406 -6385.2871 9939.1465 C
-6385.2925 9939.0977 L
-6385.4717 9939.043 -6385.8213 9939.2529 -6385.6265 9939.4551 C
-6385.5015 9939.4658 -6385.6738 9939.2354 -6385.4888 9939.3418 C
-6385.6152 9939.5537 -6385.9312 9939.6133 -6386.2031 9939.6162 C
-6386.1104 9939.5586 -6386.1216 9939.4609 -6386.0845 9939.3574 C
-6386.4497 9939.6445 -6386.8369 9939.7354 -6387.2451 9939.8555 C
-6387.2515 9940.0293 -6387.0928 9939.5391 -6387.0327 9939.6309 C
-6387.5557 9939.3896 -6388.1128 9939.9727 -6388.5479 9939.6201 C
-6388.4766 9939.5898 -6388.5098 9939.8672 -6388.5146 9939.8184 C
-6388.7666 9939.7969 -6388.7549 9939.5449 -6388.9189 9939.6377 C
-6388.9355 9939.4902 -6389.1255 9939.6855 -6389.2944 9939.7305 C
-6389.3818 9939.8369 -6389.3384 9939.6582 -6389.1914 9939.6426 C
-6389.4268 9939.7666 -6390.3691 9939.9941 -6390.9131 9939.7793 C
-6390.9023 9939.877 -6391.2471 9940.1377 -6391.3721 9940.127 C
-6391.3232 9939.8984 L
-6391.4375 9939.7617 -6391.7422 9939.918 -6391.7632 9939.7227 C
-6392.0303 9940 -6390.7344 9939.4863 -6391.0957 9939.7002 C
-6391.1895 9939.5098 -6391.5991 9940.0645 -6391.5215 9939.7529 C
-6391.7725 9939.7617 -6392.0161 9940.0186 -6392.2559 9939.8047 C
-6392.1865 9939.8418 -6392.0522 9939.4873 -6392.2549 9939.5039 C
-6392.6123 9939.5449 -6392.3564 9939.6133 -6392.6465 9939.6895 C
-6392.8281 9939.7832 L
-6392.8398 9940.0059 -6393.1475 9939.7529 -6393.0146 9940.002 C
-6393.0586 9939.8184 -6393.5337 9940.1152 -6393.4971 9939.7461 C
-6393.4473 9939.4551 L
-6393.6016 9939.4766 -6393.7002 9939.7617 -6393.8213 9939.8896 C
-6393.8418 9939.8633 -6393.8823 9939.8047 -6393.8745 9939.7578 C
-6393.8994 9940.2031 -6394.2432 9939.7207 -6394.4268 9940.0645 C
-6394.7505 9939.9102 -6395.2495 9940.0498 -6395.4023 9939.7734 C
-6395.6514 9939.9082 -6395.8784 9940.0674 -6396.1621 9939.9727 C
-6396.1055 9939.9307 -6396.0283 9939.918 -6396.0122 9939.8223 C
-6396.1904 9939.6914 -6396.2344 9939.8086 -6396.3975 9939.8809 C
-6396.3608 9939.8145 -6396.7539 9939.6201 -6396.9521 9939.4629 C
-6397.1992 9939.5957 -6397.1143 9939.8359 -6397.1392 9939.9824 C
-6397.3652 9939.543 -6397.8379 9940.2656 -6398.1211 9939.8672 C
-6398.0352 9939.8066 -6397.7598 9939.6514 -6397.9658 9939.541 C
-6398.1919 9939.1025 -6398.4219 9939.8643 -6398.7861 9939.6543 C
-6398.6968 9940.0186 L
-6398.8594 9939.793 -6399.2334 9940.2305 -6399.1963 9939.8594 C
-6399.3184 9939.9902 -6399.6265 9939.7383 -6399.5859 9940.0938 C
-6400.1846 9939.793 -6401.0425 9940.2754 -6401.4102 9939.6377 C
-6401.4961 9939.6973 -6401.7104 9939.6367 -6401.6665 9939.8193 C
-6401.5239 9940.0176 -6401.4673 9939.6777 -6401.4141 9939.8125 C
-6401.4912 9939.8232 -6401.5078 9939.9209 -6401.5161 9939.9697 C
-6401.7021 9939.8887 -6401.8486 9939.8633 -6401.6729 9939.5674 C
-6402.0869 9939.3477 -6402.1001 9940.1719 -6402.6274 9940.0322 C
-6402.6035 9939.8857 -6402.6436 9939.8301 -6402.7979 9939.8535 C
-6403.0903 9940.1055 L
-6403.4312 9940.0469 -6403.2842 9939.7705 -6403.2925 9939.5215 C
-6403.4746 9939.5645 -6403.6973 9939.5527 -6403.7803 9939.7383 C
-6404.0015 9939.4258 L
-6403.8398 9939.6514 -6404.1514 9939.5762 -6404.2368 9939.6367 C
-6404.1514 9939.5762 L
-6404.1846 9939.4697 -6404.3955 9939.5352 -6404.5024 9939.5664 C
-6404.4766 9939.7207 -6404.2617 9939.7832 -6404.1445 9939.8281 C
-6404.2373 9939.9375 -6404.3823 9939.9121 -6404.5059 9940.041 C
-6404.4648 9939.7969 -6404.8027 9939.8672 -6404.9473 9939.8418 C
-6405.1133 9939.7891 -6405.1348 9940.0605 -6405.1831 9940.0527 C
-6405.1875 9939.9258 -6405.4541 9940.0313 -6405.3247 9939.8535 C
-6405.2681 9939.8125 -6405.1953 9939.9766 -6405.1016 9939.8643 C
-6405.2109 9939.7705 -6405.1982 9939.5498 -6405.4258 9939.7109 C
-6405.5967 9939.832 -6405.3818 9940.1934 -6405.7061 9940.0391 C
-6405.6211 9939.9785 -6405.6055 9939.8809 -6405.5391 9939.793 C
-6405.8433 9939.666 L
-6405.8564 9939.8887 L
-6405.8975 9939.832 -6405.8691 9939.8125 -6405.8877 9939.7832 C
-6405.9785 9940.0176 -6406.3521 9939.8555 -6406.4209 9940.1191 C
-6406.5742 9940.1426 -6406.7441 9939.9648 -6406.8906 9939.9395 C
-6406.8623 9939.9199 L
-6407.0415 9939.7891 -6407.2793 9939.875 -6407.4297 9940.0254 C
-6407.4219 9939.9766 L
-6407.5195 9939.959 -6407.7505 9939.9941 -6407.8735 9940.125 C
-6408.1201 9939.957 -6407.9561 9939.2842 -6408.2295 9939.5645 C
-6408.48 9939.5723 -6408.6221 9939.9727 -6408.5215 9940.1152 C
-6408.9717 9939.9648 -6409.4834 9940.3281 -6409.9009 9939.9824 C
-6409.9658 9940.0723 -6409.9248 9940.1289 -6410.0586 9940.1816 C
-6410.7197 9940.0938 -6411.4551 9940.4453 -6411.9814 9940.0078 C
-6411.79 9939.9141 -6411.9688 9939.7842 -6411.9727 9939.6582 C
-6412.1309 9939.8574 -6412.1631 9939.4512 -6412.2197 9939.793 C
-6412.2041 9939.9941 -6412.2197 9940.0918 -6412.0337 9940.1729 C
-6412.4282 9940.2813 -6413.0283 9940.2813 -6413.2471 9940.0938 C
-6413.1377 9940.1865 -6413.2227 9940.248 -6413.3086 9940.3086 C
-6413.2803 9939.9873 -6413.5713 9939.9395 -6413.7915 9940.0527 C
-6413.8223 9940.248 L
-6413.9658 9940.0469 L
-6414.0503 9940.1094 -6414.0591 9940.457 -6414.2773 9940.2695 C
-6414.2891 9940.1934 -6414.3018 9940.1162 -6414.3418 9940.0605 C
-6414.5693 9940.2207 -6414.8906 9940.4922 -6415.1377 9940.3262 C
-6415.3398 9940.041 L
-6415.4453 9940.0723 -6415.6235 9940.2441 -6415.4375 9940.3262 C
-6415.8594 9940.1543 -6416.1309 9940.1328 -6416.2646 9939.8857 C
-6416.9912 9940.4873 -6418.0459 9940.5117 -6418.8906 9940.4688 C
-6418.8652 9940.3223 L
-6419.0923 9940.1855 -6418.9834 9940.5781 -6419.1416 9940.4766 C
-6419.0684 9940.3369 -6419.3145 9940.1729 -6419.1362 9940.002 C
-6419.4609 9939.8477 -6419.5547 9940.2559 -6419.7656 9940.3223 C
-6419.7979 9940.5146 -6419.5957 9940.1992 -6419.6367 9940.4434 C
-6419.6729 9940.5117 -6420.0859 9940.293 -6420.1362 9940.584 C
-6420.2178 9940.4697 -6420.1543 9940.2559 -6420.1104 9940.1377 C
-6420.3086 9940.2793 L
-6420.5513 9939.9395 -6419.7559 9939.6719 -6420.0107 9939.2529 C
-6420.1934 9939.2979 L
-6420.3682 9938.9941 -6419.71 9938.9551 -6420.1689 9938.8506 C
-6420.3682 9938.9941 -6420.5381 9939.416 -6420.3608 9939.5449 C
-6420.7754 9939.625 -6420.5527 9940.2383 -6420.9985 9940.2139 C
-6421.1201 9940.043 -6420.6416 9940.1729 -6420.7275 9939.9336 C
-6420.9375 9939.6992 -6421.1484 9940.0645 -6421.3354 9939.9824 C
-6421.1279 9940.0918 -6421.3032 9940.3857 -6421.4375 9940.4395 C
-6421.6641 9940.3018 -6421.29 9940.1641 -6421.6113 9940.1338 C
-6421.6641 9940.3018 -6421.9595 9940.4277 -6421.7041 9940.5449 C
-6421.8203 9940.9258 -6422.0381 9940.4395 -6422.2129 9940.7344 C
-6422.3174 9940.4658 -6421.8823 9940.1152 -6422.2354 9939.9814 C
-6422.1792 9940.2393 -6422.6704 9940.332 -6422.4839 9940.7139 C
-6422.6221 9940.6406 -6422.6367 9940.4375 -6422.5361 9940.2793 C
-6422.7334 9940.1201 -6423.0151 9940.75 -6423.0801 9940.2383 C
-6423.1479 9940.502 L
-6423.21 9940.416 -6423.2983 9940.3506 -6423.3994 9940.209 C
-6423.5732 9940.2041 -6423.96 9940.5664 -6423.9443 9940.168 C
-6424 9940.209 -6424.3975 9940.1914 -6424.2441 9940.4658 C
-6423.9971 9940.6338 -6423.96 9940.2656 -6423.8223 9940.6377 C
-6423.9971 9940.334 -6424.1787 9940.6777 -6424.3213 9940.7793 C
-6424.3447 9940.625 L
-6424.4297 9940.6855 -6424.6255 9940.6514 -6424.6787 9940.8184 C
-6424.6133 9940.7305 -6424.6475 9940.625 -6424.7148 9940.5879 C
-6424.8042 9940.8223 L
-6425.1494 9940.9395 -6424.8857 9940.4102 -6425.2217 9940.4785 C
-6424.9663 9940.2969 L
-6425.0225 9940.3359 -6425.1367 9940.1162 -6425.2979 9940.1895 C
-6425.3604 9940.4033 -6425.4775 9940.6602 -6425.5313 9940.8262 C
-6425.7207 9940.9199 -6425.6162 9940.585 -6425.8027 9940.8047 C
-6425.5586 9940.5469 L
-6425.5215 9940.4766 -6425.7231 9940.1934 -6425.9761 9940.1992 C
-6426.1377 9940.2734 -6426.3887 9940.582 -6426.1338 9940.6992 C
-6426.2607 9940.7031 -6426.4385 9940.5723 -6426.3379 9940.416 C
-6426.6255 9940.4902 -6426.2998 9940.6465 -6426.5479 9940.7793 C
-6426.6494 9940.6367 -6426.9658 9940.4336 -6427.1563 9940.2266 C
-6426.8975 9939.8682 L
-6427.0693 9939.8643 L
-6426.8467 9939.5781 -6427.1826 9939.6465 -6427.0566 9939.3438 C
-6427.1743 9939.2969 -6427.3169 9939.3994 -6427.4307 9939.4785 C
-6427.0864 9939.9629 -6427.8159 9940.1406 -6427.7158 9940.582 C
-6428.1875 9940.7031 -6428.0107 9939.5078 -6428.5024 9940.1992 C
-6428.4219 9940.3145 -6428.6533 9940.6504 -6428.3564 9940.5225 C
-6428.6494 9940.4746 -6428.5557 9940.9658 -6428.9014 9940.7832 C
-6428.6455 9940.6016 -6429.1763 9940.3359 -6428.8066 9940.0723 C
-6428.8311 9940.2178 -6428.6001 9940.1826 -6428.5435 9940.1426 C
-6428.6641 9939.9727 -6428.5186 9939.6973 -6428.8184 9939.6973 C
-6429.0015 9939.7393 -6429.2524 9939.748 -6429.2158 9939.9785 C
-6429.2085 9940.2314 -6428.9365 9939.9512 -6429.0537 9940.207 C
-6429.4185 9940.2949 -6429.4795 9939.9102 -6429.6304 9940.3594 C
-6429.3999 9940.3232 -6429.3423 9940.584 -6429.3467 9940.7578 C
-6429.6143 9940.8633 L
-6429.5625 9940.6953 L
-6429.9922 9940.5742 -6429.6895 9941 -6430.1055 9940.9551 C
-6430.3008 9940.623 L
-6430.2017 9940.3369 -6429.6953 9940.75 -6429.7695 9940.2842 C
-6430.04 9940.2656 -6430.1299 9940.502 -6430.3848 9940.3818 C
-6430.3281 9940.3418 -6430.2505 9940.3301 -6430.1943 9940.2891 C
-6430.2915 9940.2734 -6430.3877 9939.6563 -6430.7734 9940.0176 C
-6430.9727 9940.1582 -6430.8262 9940.1826 -6430.8311 9940.3574 C
-6431.2656 9940.4102 -6431.3955 9940.5879 -6431.6753 9940.6152 C
-6431.6177 9940.2754 -6432.1699 9940.582 -6431.8608 9940.2344 C
-6431.7188 9940.4336 -6431.0903 9940.4141 -6430.9365 9940.0898 C
-6431.0947 9939.6865 -6430.5952 9940.1465 -6430.5024 9939.7383 C
-6430.8506 9939.7285 -6430.8335 9939.332 -6430.8896 9939.0723 C
-6430.9863 9939.0537 -6431.0801 9939.1641 -6431.1377 9939.2041 C
-6431.1787 9939.4482 -6431.0522 9939.4453 -6431.0449 9939.6973 C
-6431.4336 9939.6309 -6431.8081 9939.7666 -6432.0225 9940.0059 C
-6432.1523 9939.8848 -6432.1113 9939.6406 -6431.9575 9939.6162 C
-6432.4199 9939.6895 -6432.9141 9939.6563 -6433.3535 9939.582 C
-6433.0693 9939.9814 -6433.8433 9939.6758 -6433.6494 9940.0078 C
-6433.4141 9940.0977 -6433.2119 9940.3818 -6433.3418 9940.5605 C
-6433.4888 9940.5352 -6433.3369 9940.3857 -6433.3984 9940.3008 C
-6433.5859 9940.5186 -6433.6895 9939.9512 -6433.8735 9940.2949 C
-6433.4512 9940.166 -6433.7915 9939.8086 -6433.7139 9939.4961 C
-6434.0186 9939.6719 -6433.7007 9939.2734 -6434.0024 9939.2734 C
-6434.3057 9939.4473 -6434.6787 9939.584 -6435.0161 9939.6514 C
-6435.4399 9939.3555 -6436.0898 9939.6465 -6436.4683 9939.6582 C
-6436.6665 9939.5 -6436.5322 9939.1465 -6436.7471 9939.085 C
-6436.9995 9939.0918 -6436.5601 9939.4658 -6436.9336 9939.3047 C
-6436.8975 9939.2344 L
-6437.0107 9939.3154 -6437.5825 9938.9941 -6437.6929 9939.502 C
-6437.5776 9939.1191 L
-6437.6475 9939.084 -6437.7119 9939.1719 -6437.7695 9939.2129 C
-6437.7725 9939.0879 -6437.8535 9938.9746 -6437.7402 9938.8926 C
-6437.9707 9938.6289 -6438.2241 9938.9346 -6438.4746 9938.9453 C
-6438.3135 9939.1719 L
-6438.7422 9939.3496 -6439.0293 9939.125 -6439.4443 9939.2041 C
-6439.4316 9938.9824 L
-6439.6787 9939.1152 L
-6439.6182 9938.8994 -6439.8447 9938.7617 -6439.9751 9938.9414 C
-6439.3335 9938.3984 L
-6439.1553 9938.5293 -6439.5283 9938.666 -6439.4165 9938.8848 C
-6439.3213 9939.0762 -6438.9375 9939.0146 -6438.8755 9938.8018 C
-6439.0225 9938.7773 -6439.0293 9938.8262 -6439.1436 9938.9063 C
-6439.1919 9938.5977 -6438.9688 9938.6094 -6438.8584 9938.4033 C
-6438.9355 9938.416 -6439.0449 9938.3223 -6439.0615 9938.4199 C
-6438.9102 9938.2695 -6438.7578 9938.2461 -6438.5059 9938.2383 C
-6438.6763 9938.3594 -6438.4131 9938.4297 -6438.4775 9938.5176 C
-6438.4575 9938.2461 -6438.2168 9938.1621 -6437.9053 9938.2383 C
-6437.6831 9938.5527 -6437.3208 9938.0361 -6436.96 9938.123 C
-6437.1064 9938.3984 -6437.2935 9938.6191 -6437.5127 9938.7305 C
-6437.2861 9938.8682 -6437.2607 9938.7227 -6437.0337 9938.8613 C
-6436.9238 9938.6563 -6436.8457 9938.3418 -6436.5503 9938.2168 C
-6436.5342 9938.4199 L
-6436.2666 9938.3154 -6436.2666 9938.0146 -6435.9258 9938.0723 C
-6435.3418 9938.1719 -6434.7407 9938.1719 -6434.2949 9938.1973 C
-6434.2783 9938.3994 L
-6434.0303 9937.9658 -6433.4521 9938.2393 -6433.1182 9938.0469 C
-6432.5503 9938.2422 -6431.8848 9937.8535 -6431.5938 9938.2031 C
-6430.5913 9938.0469 -6429.7148 9937.8945 -6428.6768 9937.9688 C
-6428.8516 9938.2637 L
-6428.6655 9938.0469 -6428.7305 9938.4336 -6428.5479 9938.3896 C
-6428.7578 9938.1543 -6428.2949 9938.084 -6428.1665 9937.9033 C
-6427.7041 9938.1328 -6427.1104 9937.8818 -6426.7007 9937.6758 C
-6426.6846 9937.8789 L
-6426.2705 9937.498 -6425.7759 9937.832 -6425.2598 9937.8945 C
-6425.2007 9937.9785 -6425.1074 9938.1689 -6424.9536 9938.1465 C
-6424.6738 9937.8184 -6424.5273 9937.8418 -6424.1167 9937.6367 C
-6423.8169 9937.6367 -6423.3301 9937.7178 -6423.0254 9937.8457 C
-6421.8975 9937.3848 -6420.7456 9937.6797 -6419.5732 9937.4023 C
-6419.4888 9937.6406 L
-6418.3521 9937.1309 -6416.9541 9937.5938 -6415.9839 9937.332 C
-6416.0776 9937.7393 L
-6415.7734 9937.8643 -6415.3843 9937.6328 -6415.4619 9937.3438 C
-6415.1567 9937.4688 -6414.7007 9937.1465 -6414.5068 9937.4814 C
-6414.1953 9937.5566 -6414.1255 9937.293 -6413.8662 9937.2383 C
-6413.2422 9937.3926 -6413.0107 9937.3574 -6412.4224 9937.2813 C
-6412.5684 9937.2559 L
-6412.6328 9937.3457 -6412.6387 9937.5186 -6412.4922 9937.5449 C
-6412.2725 9937.4307 -6411.6846 9937.6543 -6411.9033 9937.168 C
-6411.2754 9937.4482 -6410.4385 9936.9395 -6409.8271 9937.3184 C
-6409.8789 9937.1855 -6409.7246 9937.1602 -6409.6602 9937.0703 C
-6409.1089 9937.0645 -6408.5293 9937.3359 -6408.0898 9937.1094 C
-6408.0024 9937.1758 -6408.2295 9937.3359 -6408.0049 9937.3496 C
-6407.8721 9937.2979 -6408.0024 9937.1758 -6407.8384 9937.1016 C
-6406.9453 9936.8535 -6406.0303 9937.3574 -6405.2188 9937.293 C
-6403.7754 9937.0361 -6402.2695 9937.166 -6400.8867 9937.123 C
-6400.9023 9937.2207 L
-6400.4395 9936.8477 -6399.8159 9937.6025 -6399.4463 9937.041 C
-6399.3369 9937.1338 -6399.0283 9937.085 -6399.1094 9937.2734 C
-6398.7407 9937.0098 -6398.0771 9937.5215 -6397.5439 9937.1865 C
-6397.5928 9937.1777 -6397.6211 9937.1973 -6397.6777 9937.2393 C
-6397.1392 9937.4551 -6396.6641 9937.1602 -6396.0957 9937.3555 C
-6396.1533 9937.3975 -6396.2583 9937.4277 -6396.2754 9937.5254 C
-6396.0557 9937.7129 -6395.7549 9937.1133 -6395.6348 9937.584 C
-6395.5088 9937.5801 -6395.5449 9937.3477 -6395.6221 9937.3613 C
-6394.3779 9937.5449 -6393.0498 9937.2441 -6391.7549 9937.1367 C
-6390.8271 9937.418 -6391.6982 9937.9297 -6390.9663 9937.5781 C
-6390.9063 9937.6689 -6390.9229 9937.3984 -6390.9131 9937.4961 C
-6390.6299 9937.3643 -6390.4717 9938.0215 -6390.2754 9937.7754 C
-6390.3564 9937.4863 -6390.1445 9937.6133 -6390.1387 9937.4375 C
-6389.5713 9937.625 -6389.4575 9937.8857 -6389.0098 9937.666 C
-6389.0435 9937.8184 L
-6388.5186 9937.3887 -6387.9102 9937.6191 -6387.4673 9937.123 C
-6384.5728 9937.0322 -6381.7983 9936.7578 -6378.9761 9936.7002 C
-6376.1865 9936.7949 -6373.4551 9936.5723 -6370.6221 9936.8359 C
-6369.9585 9937.2354 -6369.9087 9937.2246 -6369.1797 9937.0625 C
-6369.2095 9937.127 -6369.2549 9937.1426 -6369.2061 9937.2031 C
-6369.1699 9936.875 -6368.6929 9937.1719 -6368.6235 9936.8594 C
-6367.5762 9936.9199 -6366.6113 9936.8301 -6365.5337 9936.8281 C
-6365.7041 9936.8633 -6365.7896 9937.1309 -6365.5869 9937.1094 C
-6365.3755 9936.8994 L
-6365.3408 9936.9922 L
-6365.2021 9936.9434 -6365.0513 9936.7813 -6365.1943 9936.6758 C
-6362.4873 9936.3926 -6359.8242 9937.0498 -6357.1729 9936.9697 C
-6356.5439 9937.1064 -6355.6475 9936.9814 -6354.9629 9936.9141 C
-6352.9355 9937.3506 -6351.1084 9937.7041 -6349.0479 9937.3984 C
-6349.3174 9938.2461 -6350.1675 9938.4414 V
f
-6440.2578 9938.2422 m
-6440.1855 9938.4063 -6439.9497 9938.4961 -6440.1377 9938.7139 C
-6440.1611 9938.5605 -6440.2822 9938.3887 -6440.2578 9938.2422 C
f
-6433.9619 9939.9297 m
-6433.9536 9939.8809 -6433.8721 9939.9961 -6433.8521 9940.0225 C
-6433.9297 9940.0352 -6434.0024 9940.1729 -6434.0645 9940.0879 C
-6433.9854 9940.0762 -6433.9976 9939.998 -6433.9619 9939.9297 C
f
-6432.3521 9940.0273 m
-6432.3765 9940.1729 -6432.7207 9940.2891 -6432.9238 9940.3066 C
-6432.3521 9940.0273 L
f
-6430.8521 9940.6289 m
-6430.7227 9940.752 -6430.7583 9940.8193 -6430.9326 9940.8154 C
-6430.9453 9940.7383 -6430.8877 9940.6992 -6430.8521 9940.6289 C
f
-6430.7456 9940.2969 m
-6430.6211 9940.293 -6430.5591 9940.3789 -6430.4985 9940.4629 C
-6430.5029 9940.3369 -6430.7871 9940.541 -6430.7456 9940.2969 C
f
-6427.4893 9940.7207 m
-6427.4111 9940.709 -6427.2417 9940.5879 -6427.1689 9940.75 C
-6427.2505 9940.6367 -6427.5498 9940.9346 -6427.4893 9940.7207 C
f
-6425.9761 9940.5 m
-6425.9272 9940.5098 -6425.9072 9940.5361 -6425.8506 9940.4961 C
-6425.7607 9940.5625 -6425.8555 9940.6689 -6425.9312 9940.6826 C
-6425.9761 9940.5 L
f
-6398.4287 9939.9141 m
-6398.5923 9939.9863 L
-6398.5684 9939.8418 L
-6398.4287 9939.9141 L
f
-6386.3574 9939.9063 m
-6386.1943 9939.8145 -6386.2441 9940.043 -6386.2168 9940.0645 C
-6386.3643 9940.0801 -6386.1621 9939.8848 -6386.3574 9939.9063 C
f
-6379.8486 9939.1777 m
-6379.8984 9939.1816 L
-6379.8818 9938.8818 L
-6379.8486 9939.1777 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -
(1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
(Black)
Pc
0 0.992157 1 0 1 0 0 Xa
(RGB Red)
Pc
0.062745 0 0.964706 0 1 1 0 Xa
(RGB Yellow)
Pc
0.627451 0 1 0 0 1 0 Xa
(RGB Green)
Pc
0.517647 0 0.12549 0 0 1 1 Xa
(RGB Cyan)
Pc
0.882353 0.768627 0 0 0 0 1 Xa
(RGB Blue)
Pc
0.270588 0.815686 0 0 1 0 1 Xa
(RGB Magenta)
Pc
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa
(R=237 G=28 B=36)
Pc
0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa
(R=241 G=90 B=36)
Pc
0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa
(R=247 G=147 B=30)
Pc
0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa
(R=251 G=176 B=59)
Pc
0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa
(R=252 G=238 B=33)
Pc
0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa
(R=217 G=224 B=33)
Pc
0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa
(R=140 G=198 B=63)
Pc
0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa
(R=57 G=181 B=74)
Pc
0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa
(R=0 G=104 B=55)
Pc
0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa
(R=34 G=181 B=115)
Pc
0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa
(R=41 G=171 B=226)
Pc
0.87451 0.52549 0 0 0 0.443137 0.737255 Xa
(R=0 G=113 B=188)
Pc
0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa
(R=46 G=49 B=146)
Pc
1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa
(R=27 G=20 B=100)
Pc
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa
(R=147 G=39 B=143)
Pc
0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa
(R=158 G=0 B=93)
Pc
0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa
(R=212 G=20 B=90)
Pc
0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa
(R=153 G=134 B=117)
Pc
0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa
(R=198 G=156 B=109)
Pc
0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa
(R=140 G=98 B=57)
Pc
0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa
(R=96 G=56 B=19)
Pc
0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa
(R=66 G=33 B=11)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
Bb
2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 2)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 2)
Pc
(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Offset Squares Pattern)
Pc
0 g
(K=100)
Pc
0.1 g
(K=90)
Pc
0.2 g
(K=80)
Pc
0.3 g
(K=70)
Pc
0.4 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.6 g
(K=40)
Pc
0.7 g
(K=30)
Pc
0.8 g
(K=20)
Pc
0.9 g
(K=10)
Pc
0.95 g
(R=241 G=241  B=242)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
u
U
u
U
u
U
u
U
u
U
u
U
U
u
u
U
u
U
u
U
u
U
u
U
u
U
U
u
u
u
0 O
0.85098 0.380392 1 0.352941 0.113725 0.356863 0.145098 Xa
0 J 0 j 1 w 4 M []0 d0 XR
1865.459 2013.1572 m
1857.7197 1752.3364 l
1754.6533 1789.8438 l
1755.9619 2037.2319 l
1865.459 2013.1572 L
f
U
u
0.305882 1 0.996078 0.415686 0.466667 0.054902 0.070588 Xa
1865.459 2013.1572 m
1857.7197 1752.3364 l
1753.7598 1712.9443 l
1755.1836 1988.1084 l
1865.459 2013.1572 L
f
U
u
1104.8345 1958.9849 m
1146.209 1666.0244 l
972.6924 1653.9824 l
918.0718 1951.5029 l
1104.8345 1958.9849 L
f
U
q
1755.1836 1988.1084 m
1753.7598 1712.9443 l
1729.1343 1713.0957 1704.3813 1712.6992 1679.5942 1711.7354 c
1654.7314 1710.7715 1629.751 1709.2295 1604.7437 1707.0889 c
1579.5718 1704.9375 1554.2886 1702.1748 1528.9712 1698.7676 c
1503.4009 1695.3252 1477.709 1691.2139 1451.9717 1686.3955 C
1425.8755 1681.5059 1400.4673 1676.0303 1375.7871 1669.998 c
1350.688 1663.8613 1326.2681 1657.1309 1302.5835 1649.8486 c
1278.4263 1642.417 1254.9683 1634.3867 1232.2817 1625.7871 c
1209.0796 1616.9951 1186.6265 1607.5859 1165.0142 1597.6016 C
1121.0068 1914.2354 l
1144.8608 1920.7559 1169.5449 1926.8828 1194.9575 1932.5933 c
1219.7632 1938.1689 1245.3286 1943.3633 1271.5781 1948.1592 c
1297.2788 1952.8545 1323.7085 1957.1772 1350.8091 1961.1104 c
1377.4268 1964.9727 1404.7739 1968.4702 1432.811 1971.5811 C
1460.4341 1974.644 1487.9692 1977.248 1515.3389 1979.4194 c
1542.4155 1981.5674 1569.4346 1983.2988 1596.3071 1984.6372 c
1622.9951 1985.9639 1649.6387 1986.9053 1676.144 1987.4785 c
1702.564 1988.0498 1728.9409 1988.2554 1755.1836 1988.1084 C
h
W
n
0 O
0.380392 0.764706 0.94902 0.498039 0.388235 0.192157 0.078431 Xa
1676.144 1987.4785 m
1649.6387 1986.9053 1622.9951 1985.9639 1596.3071 1984.6372 c
1569.4346 1983.2988 1542.4155 1981.5674 1515.3389 1979.4194 c
1487.9692 1977.248 1460.4341 1974.644 1432.811 1971.5811 c
1404.7739 1968.4702 1377.4268 1964.9727 1350.8091 1961.1104 c
1323.7085 1957.1772 1297.2788 1952.8545 1271.5781 1948.1592 c
1245.3286 1943.3633 1219.7632 1938.1689 1194.9575 1932.5933 c
1169.5449 1926.8828 1144.8608 1920.7559 1121.0068 1914.2354 C
1165.0142 1597.6016 L
1186.6265 1607.5859 1209.0796 1616.9951 1232.2817 1625.7871 c
1254.9683 1634.3867 1278.4263 1642.417 1302.5835 1649.8486 c
1326.2681 1657.1309 1350.688 1663.8613 1375.7871 1669.998 c
1400.4673 1676.0303 1425.8755 1681.5059 1451.9717 1686.3955 c
1477.709 1691.2139 1503.4009 1695.3252 1528.9712 1698.7676 c
1554.2886 1702.1748 1579.5718 1704.9375 1604.7437 1707.0889 c
1629.751 1709.2295 1654.7314 1710.7715 1679.5942 1711.7354 c
1704.3813 1712.6992 1729.1343 1713.0957 1753.7598 1712.9443 C
1755.1836 1988.1084 L
1728.9409 1988.2554 1702.564 1988.0498 1676.144 1987.4785 c
f
Q
0 A
u
0 O
0 J 0 j 1 w 4 M []0 d0 XR
918.0718 1951.5029 m
992.2749 1968.3003 1065.7441 1982.2041 1138.1455 1993.5195 c
1206.7153 2004.2393 1275.6226 2012.8408 1344.5405 2019.4614 c
1411.0894 2025.8525 1478.8105 2030.5049 1547.459 2033.4438 c
1614.9355 2036.3325 1684.4648 2037.6133 1755.9619 2037.2319 C
1865.459 2013.1572 L
1755.1836 1988.1084 L
1728.9409 1988.2554 1702.564 1988.0498 1676.144 1987.4785 C
1649.6387 1986.9053 1622.9951 1985.9639 1596.3071 1984.6372 C
1569.4346 1983.2988 1542.4155 1981.5674 1515.3389 1979.4194 C
1487.9692 1977.248 1460.4341 1974.644 1432.811 1971.5811 C
1404.7739 1968.4702 1377.4268 1964.9727 1350.8091 1961.1104 c
1323.7085 1957.1772 1297.2788 1952.8545 1271.5781 1948.1592 c
1245.3286 1943.3633 1219.7632 1938.1689 1194.9575 1932.5933 c
1169.5449 1926.8828 1144.8608 1920.7559 1121.0068 1914.2354 C
1104.8345 1958.9849 L
918.0718 1951.5029 L
Bb
1 (Unnamed gradient 13) 918.0718 1975.7666 0 947.3872 1 0 0 1 0 0 Bg
947.3872 0 0 -127.3779 918.0718 2039.6133 Xm
7362.0718 0 0 -127.3779 -6444 2039.6133 Bc
947.3872 0 0 -127.3779 918.0718 2039.6133 Bm
7362.0718 0 0 -127.3779 1865.459 2039.6133 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
1755.3594 2031.8467 m
1747.3501 2031.8872 1739.3726 2031.9102 1731.4126 2031.9102 c
1669.1699 2031.9102 1607.356 2030.6152 1547.6909 2028.0605 c
1479.168 2025.1284 1410.9917 2020.4307 1345.0552 2014.0996 c
1275.5112 2007.415 1206.1758 1998.7021 1138.9771 1988.1968 c
1085.7949 1979.8843 1032.522 1970.2275 979.9302 1959.3721 C
1104.6187 1964.3662 L
1108.5596 1964.5254 L
1109.9019 1960.8159 L
1124.3862 1920.7368 L
1146.7563 1926.7729 1170.0742 1932.5229 1193.7759 1937.8486 c
1218.5747 1943.4248 1244.4253 1948.6758 1270.6118 1953.458 c
1296.3013 1958.1538 1323.0249 1962.521 1350.0361 1966.4409 c
1376.7192 1970.3159 1404.3706 1973.8467 1432.2163 1976.9375 c
1459.3916 1979.9507 1487.2144 1982.5918 1514.9136 1984.7915 c
1541.6323 1986.9092 1568.9277 1988.6685 1596.0396 1990.0181 c
1622.4141 1991.3286 1649.3252 1992.2876 1676.0288 1992.8657 c
1696.8169 1993.3145 1717.9419 1993.5415 1738.8208 1993.5415 c
1744.0835 1993.5415 1749.3442 1993.5278 1754.5957 1993.498 C
1840.7598 2013.0708 L
1755.3594 2031.8467 L
f
0 D
1754.0117 1998.8901 m
1748.9536 1998.9165 1743.8892 1998.9302 1738.8218 1998.9302 c
1717.9478 1998.9302 1696.7808 1998.7021 1675.9126 1998.2524 c
1649.167 1997.6738 1622.2041 1996.7119 1595.7729 1995.3984 c
1568.6431 1994.0483 1541.2935 1992.2871 1514.4893 1990.1611 c
1486.7012 1987.9546 1458.8228 1985.3066 1431.6245 1982.293 c
1403.7285 1979.1973 1376.0195 1975.6582 1349.2622 1971.7734 c
1322.1187 1967.832 1295.3325 1963.4541 1269.6431 1958.7578 c
1243.354 1953.9551 1217.4321 1948.689 1192.5918 1943.1055 c
1170.5254 1938.145 1148.7456 1932.8086 1127.772 1927.2227 C
1114.9692 1962.647 L
1113.624 1966.3604 L
1112.2808 1970.0708 L
1108.3394 1969.9102 L
1104.4004 1969.75 L
1049.9976 1967.5703 L
1079.9141 1973.0869 1109.9385 1978.2046 1139.8091 1982.874 c
1206.8628 1993.3564 1276.0918 2002.0576 1345.5698 2008.7349 c
1411.4458 2015.062 1479.5264 2019.752 1547.9204 2022.6777 c
1607.5132 2025.2285 1669.2485 2026.5215 1731.4116 2026.5215 c
1739.1763 2026.5215 1746.9556 2026.499 1754.7627 2026.4604 C
1816.0615 2012.9839 L
1754.0117 1998.8901 L
f
*U
U
u
0.305882 1 0.996078 0.415686 0.466667 0.054902 0.070588 Xa
1121.0068 1914.2354 m
1165.0142 1597.6016 l
1146.209 1666.0244 l
1104.8345 1958.9849 l
1121.0068 1914.2354 L
f
U
q
2388.2461 1907.1885 m
2340.8965 1590.4189 l
2294.791 1612.4463 2246.4102 1631.1348 2196.9805 1646.7178 c
2149.4746 1661.6934 2100.3652 1674.0039 2050.6914 1683.7461 c
2002.292 1693.2354 1952.7393 1700.4043 1902.9482 1705.2539 c
1853.8008 1710.0439 1803.7998 1712.6348 1753.7598 1712.9443 C
1755.1836 1988.1084 l
1808.502 1987.8076 1861.8135 1986.0444 1914.2744 1982.8623 c
1967.4697 1979.6367 2020.5186 1974.9111 2072.4844 1968.6807 c
2125.9082 1962.2739 2178.9336 1954.189 2230.4922 1944.3496 c
2284.2891 1934.0845 2337.2949 1921.7549 2388.2461 1907.1885 C
h
W
n
0 O
0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa
2230.4922 1944.3496 m
2178.9336 1954.189 2125.9082 1962.2739 2072.4844 1968.6807 c
2020.5186 1974.9111 1967.4697 1979.6367 1914.2744 1982.8623 c
1861.8135 1986.0444 1808.502 1987.8076 1755.1836 1988.1084 C
1753.7598 1712.9443 L
1803.7998 1712.6348 1853.8008 1710.0439 1902.9482 1705.2539 c
1952.7393 1700.4043 2002.292 1693.2354 2050.6914 1683.7461 c
2100.3652 1674.0039 2149.4746 1661.6934 2196.9805 1646.7178 c
2246.4102 1631.1348 2294.791 1612.4463 2340.8965 1590.4189 C
2388.2461 1907.1885 L
2337.2949 1921.7549 2284.2891 1934.0845 2230.4922 1944.3496 c
f
Q
0 A
u
0 O
1 0.796078 0.376471 0.266667 0 0.227451 0.376471 Xa
0 J 0 j 1 w 4 M []0 d0 XR
2610.6543 1897.1548 m
2546.1934 1575.8154 l
2535.459 1644.6104 l
2593.4102 1942.3096 l
2610.6543 1897.1548 L
f
U
u
0.803922 0.152941 1 0.023529 0.188235 0.6 0.247059 Xa
1755.1836 1988.1084 m
1865.459 2013.1572 L
1755.9619 2037.2319 L
1827.4707 2036.8506 1896.9971 2034.8252 1964.4512 2031.2144 c
2033.1094 2027.5391 2100.8164 2022.1558 2167.3262 2015.0435 c
2236.2344 2007.6729 2305.1016 1998.3125 2373.5977 1986.8311 c
2445.9551 1974.7021 2519.3398 1959.9658 2593.4102 1942.3096 C
2610.6543 1897.1548 L
2388.2461 1907.1885 L
2337.2949 1921.7549 2284.2891 1934.0845 2230.4922 1944.3496 c
2178.9336 1954.189 2125.9082 1962.2739 2072.4844 1968.6807 c
2020.5186 1974.9111 1967.4697 1979.6367 1914.2744 1982.8623 c
1861.8135 1986.0444 1808.502 1987.8076 1755.1836 1988.1084 C
f
*u
1 D
0 0 0 0 1 1 1 Xa
2589.3945 1937.728 m
2518.3887 1954.584 2445.5059 1969.3135 2372.707 1981.5166 c
2305.5703 1992.7705 2236.2773 2002.249 2166.752 2009.6841 c
2100.8398 2016.7358 2032.6787 2022.167 1964.1631 2025.834 c
1913.3828 2028.5537 1861.1133 2030.3701 1808.1934 2031.2656 C
1866.6152 2018.4189 L
1866.6514 2007.9023 L
1800.5449 1992.8887 L
1838.7451 1992.0781 1876.9434 1990.5244 1914.6006 1988.2397 c
1968.3223 1984.9824 2021.6582 1980.2012 2073.125 1974.0283 c
2127.7363 1967.48 2181.0234 1959.2744 2231.502 1949.6416 c
2286.8242 1939.0874 2339.8496 1926.6035 2389.1113 1912.5454 C
2602.6895 1902.9092 L
2589.3945 1937.728 L
f
0 D
2232.5098 1954.9346 m
2181.9023 1964.5918 2128.4922 1972.8174 2073.7676 1979.3774 c
2022.2256 1985.5601 1968.7842 1990.3491 1914.9268 1993.6191 c
1891.2803 1995.0508 1867.2949 1996.2036 1843.2471 1997.0615 C
1867.8447 2002.6484 L
1872.0537 2003.6055 L
1872.0381 2007.9219 L
1872.002 2018.4399 L
1871.9863 2022.7559 L
1867.7715 2023.6836 L
1863.6357 2024.5928 L
1897.5752 2023.5928 1931.1221 2022.209 1963.876 2020.4531 c
2032.3213 2016.792 2100.3867 2011.3643 2166.1797 2004.3286 c
2235.5781 1996.9053 2304.7637 1987.4434 2371.8164 1976.2021 c
2443.5234 1964.1826 2515.3613 1949.6978 2585.375 1933.1436 C
2594.7266 1908.6616 L
2389.9746 1917.9023 L
2340.7012 1931.9404 2287.7285 1944.3984 2232.5098 1954.9346 c
f
*U
U
u
0.85098 0.380392 1 0.352941 0.113725 0.356863 0.145098 Xa
2610.6543 1897.1548 m
2546.1934 1575.8154 l
2340.8965 1590.4189 l
2388.2461 1907.1885 l
2610.6543 1897.1548 L
f
U
u
1 0.792157 0.380392 0.286274 0 0.223529 0.368627 Xa
747.0005 1626.2461 m
854.8276 1176.5059 l
602.6948 1211.2578 l
468.0981 1651.4648 l
747.0005 1626.2461 L
f
U
q
1121.0068 1914.2354 m
1165.0142 1597.6016 l
1119.3853 1576.5176 1077.1787 1552.6982 1039.4849 1526.4717 c
999.3989 1498.583 964.0835 1467.7451 935.1499 1434.4082 c
904.0864 1398.6211 880.1768 1359.7256 865.7085 1318.415 c
850.0532 1273.7256 845.3926 1226.0469 854.8276 1176.5059 C
747.0005 1626.2461 l
741.2852 1661.4668 751.1255 1695.0117 772.7681 1726.1494 c
792.6055 1754.686 822.4399 1781.3271 859.6182 1805.6416 c
894.0161 1828.1406 934.9424 1848.8081 980.5894 1867.3755 c
1023.2866 1884.7441 1070.4912 1900.4321 1121.0068 1914.2354 C
h
W
n
0 O
1121.0068 1914.2354 m
1070.4912 1900.4321 1023.2866 1884.7441 980.5894 1867.3755 c
934.9424 1848.8081 894.0161 1828.1406 859.6182 1805.6416 c
822.4399 1781.3271 792.6055 1754.686 772.7681 1726.1494 c
751.1255 1695.0117 741.2852 1661.4668 747.0005 1626.2461 C
854.8276 1176.5059 L
845.3926 1226.0469 850.0532 1273.7256 865.7085 1318.415 c
880.1768 1359.7256 904.0864 1398.6211 935.1499 1434.4082 c
964.0835 1467.7451 999.3989 1498.583 1039.4849 1526.4717 c
1077.1787 1552.6982 1119.3853 1576.5176 1165.0142 1597.6016 C
1121.0068 1914.2354 L
Bb
1 (Unnamed gradient 19) 788.8564 1452.5586 29.7448 260.5627 1 0 0 1 0 0 Bg
226.232 129.275 273.0419 -477.8251 651.9604 1692.127 Xm
6349.0659 3628.0249 273.0419 -477.8251 -5697.1055 -1935.8984 Bc
226.232 129.275 273.0419 -477.8251 651.9604 1692.127 Bm
6349.0659 3628.0249 273.0419 -477.8251 878.1924 1821.4019 Bc
f
0 BB
Q
0 A
q
0 J 0 j 1 w 4 M []0 d0 XR
2755.3867 1614.0693 m
2643.0273 1164.2764 l
2652.8984 1210.6592 2650.2715 1256.5801 2636.918 1300.6387 c
2624.5469 1341.4443 2602.9648 1380.668 2573.4824 1417.4375 c
2546.0371 1451.666 2511.6465 1483.8965 2471.1563 1513.5703 c
2433.1797 1541.3965 2389.6133 1567.1445 2340.8965 1590.4189 C
2388.2461 1907.1885 l
2442.3145 1891.7339 2491.2344 1874.5737 2534.4805 1855.9502 c
2580.8457 1835.9858 2621.0449 1814.187 2654.0586 1790.9063 c
2689.7715 1765.7251 2717.2617 1738.6836 2734.916 1710.3535 c
2754.1348 1679.5059 2761.7148 1647.0879 2755.3867 1614.0693 C
h
W
n
0 O
2734.916 1710.3535 m
2717.2617 1738.6836 2689.7715 1765.7251 2654.0586 1790.9063 c
2621.0449 1814.187 2580.8457 1835.9858 2534.4805 1855.9502 c
2491.2344 1874.5737 2442.3145 1891.7339 2388.2461 1907.1885 C
2340.8965 1590.4189 L
2389.6133 1567.1445 2433.1797 1541.3965 2471.1563 1513.5703 c
2511.6465 1483.8965 2546.0371 1451.666 2573.4824 1417.4375 c
2602.9648 1380.668 2624.5469 1341.4443 2636.918 1300.6387 c
2650.2715 1256.5801 2652.8984 1210.6592 2643.0273 1164.2764 C
2755.3867 1614.0693 L
2761.7148 1647.0879 2754.1348 1679.5059 2734.916 1710.3535 c
Bb
1 (Unnamed gradient 19) 2900.4717 1393.2178 159.353 476.6122 1 0 0 1 0 0 Bg
-445.9997 168.0578 216.9082 575.6411 2792.2158 1105.9229 Xm
-8594.3896 3238.4651 216.9082 575.6411 11386.6055 -2132.542 Bc
-445.9997 168.0578 216.9082 575.6411 2792.2158 1105.9229 Bm
-8594.3896 3238.4651 216.9082 575.6411 2346.2158 1273.9805 Bc
f
0 BB
Q
0 A
q
0 J 0 j 1 w 4 M []0 d0 XR
857.6538 1163.3672 m
821.3989 1314.5342 785.145 1465.6777 748.8901 1616.8447 c
748.7026 1617.6299 748.522 1618.4131 748.3496 1619.1992 c
748.1768 1619.9834 748.0112 1620.7686 747.853 1621.5518 c
747.6973 1622.333 747.5459 1623.1162 747.4038 1623.8994 c
747.2627 1624.6807 747.1284 1625.4609 747.0005 1626.2461 C
854.8276 1176.5059 l
855.0371 1175.4111 855.2515 1174.3203 855.4736 1173.2227 c
855.6963 1172.126 855.9253 1171.0342 856.1606 1169.9395 c
856.3955 1168.8408 856.6372 1167.749 856.8867 1166.6543 c
857.1353 1165.5557 857.3911 1164.46 857.6538 1163.3672 C
h
W
n
Q
0 A
u
0 O
1 0.792157 0.380392 0.286274 0 0.223529 0.368627 Xa
0 J 0 j 1 w 4 M []0 d0 XR
3024.7168 1480.8809 m
2862.0313 982.0889 l
2643.0273 1164.2764 l
2755.3867 1614.0693 l
3024.7168 1480.8809 L
f
U
q
2753.8594 1607.1367 m
2716.1719 1456.2852 2678.4766 1305.4365 2640.7891 1154.5889 c
2640.9902 1155.3994 2641.1875 1156.208 2641.3809 1157.0156 c
2641.5762 1157.8223 2641.7676 1158.6299 2641.9551 1159.4375 c
2642.1426 1160.2461 2642.3242 1161.0498 2642.5039 1161.8594 c
2642.6816 1162.6631 2642.8574 1163.4688 2643.0273 1164.2764 C
2755.3867 1614.0693 l
2755.2754 1613.4941 2755.1621 1612.917 2755.043 1612.3418 c
2754.9258 1611.7666 2754.8008 1611.1875 2754.6738 1610.6094 c
2754.5469 1610.0313 2754.4141 1609.4531 2754.2793 1608.875 c
2754.1426 1608.2979 2754.0039 1607.7168 2753.8594 1607.1367 C
h
W
n
Q
0 A
u
0 O
1 0.792157 0.380392 0.286274 0 0.223529 0.368627 Xa
0 J 0 j 1 w 4 M []0 d0 XR
468.0981 1651.4648 m
602.6948 1211.2578 l
315.2808 1026.2275 l
116.5684 1518.3281 l
468.0981 1651.4648 L
f
U
u
116.5684 1518.3281 m
151.9941 1581.3564 205.0664 1637.7363 270.5 1687.6074 c
327.9976 1731.4307 395.7104 1770.751 470.6338 1805.6724 c
537.7651 1836.9629 611.459 1865.0854 689.9688 1890.0947 c
761.5269 1912.8882 837.8911 1933.3535 918.0718 1951.5029 C
1104.8345 1958.9849 L
1121.0068 1914.2354 L
1070.4912 1900.4321 1023.2866 1884.7441 980.5894 1867.3755 c
934.9424 1848.8081 894.0161 1828.1406 859.6182 1805.6416 c
822.4399 1781.3271 792.6055 1754.686 772.7681 1726.1494 c
751.1255 1695.0117 741.2852 1661.4668 747.0005 1626.2461 C
468.0981 1651.4648 L
116.5684 1518.3281 L
Bb
1 (Unnamed gradient 112) 934.7295 1883.1445 -152.9165 558.7575 1 0 0 1 0 0 Bg
-497.4862 -254.3961 -133.2164 260.5124 1000.8633 1753.8159 Xm
-6735.1929 -3444.1289 -133.2164 260.5124 7736.0557 5197.9448 Bc
-497.4862 -254.3961 -133.2164 260.5124 1000.8633 1753.8159 Bm
-6735.1929 -3444.1289 -133.2164 260.5124 503.377 1499.4199 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
1101.1099 1953.4448 m
918.772 1946.1367 L
838.1089 1927.8672 761.6797 1907.2847 691.6055 1884.9614 c
611.7153 1859.5117 538.1362 1831.1919 472.9102 1800.7881 c
396.0029 1764.9434 329.001 1725.4219 273.7666 1683.3213 c
211.083 1635.5488 162.4253 1583.6143 128.9375 1528.7754 C
466.1909 1656.5029 L
467.3501 1656.9414 L
468.585 1656.8281 L
740.7578 1632.2197 L
737.1904 1665.125 746.4521 1697.7266 768.3452 1729.2236 c
787.9341 1757.4072 817.6509 1784.6348 856.6704 1810.1523 c
890.5752 1832.3286 931.585 1853.2588 978.5581 1872.3652 c
1019.3916 1888.9761 1064.918 1904.2803 1113.9604 1917.8828 C
1101.1099 1953.4448 L
f
0 D
976.5288 1877.3569 m
929.2314 1858.1191 887.9136 1837.0234 853.7212 1814.6611 c
814.1177 1788.7588 783.9033 1761.0479 763.9204 1732.2988 c
742.7246 1701.8066 732.9629 1670.1689 734.853 1638.1631 C
469.0698 1662.1953 L
467.835 1662.3066 L
466.6016 1662.418 L
465.4438 1661.9824 L
464.2852 1661.5439 L
142.187 1539.5527 L
174.8584 1588.8252 220.1499 1635.6875 277.0332 1679.0342 c
331.9492 1720.8955 398.6187 1760.2168 475.1846 1795.9063 c
540.2056 1826.2139 613.5708 1854.4487 693.2412 1879.8276 c
763.061 1902.0698 839.1772 1922.5728 919.4878 1940.7754 C
1097.3828 1947.9043 L
1106.9204 1921.5078 L
1059.8374 1908.2549 1015.9961 1893.4121 976.5288 1877.3569 c
f
*U
U
u
1 0.792157 0.380392 0.286274 0 0.223529 0.368627 Xa
3387.8711 1497.9072 m
3183.1973 1005.9033 l
2862.0313 982.0889 l
3024.7168 1480.8809 l
3387.8711 1497.9072 L
f
U
u
3024.7168 1480.8809 m
2755.3867 1614.0693 L
2761.7148 1647.0879 2754.1348 1679.5059 2734.916 1710.3535 c
2717.2617 1738.6836 2689.7715 1765.7251 2654.0586 1790.9063 c
2621.0449 1814.187 2580.8457 1835.9858 2534.4805 1855.9502 c
2491.2344 1874.5737 2442.3145 1891.7339 2388.2461 1907.1885 C
2610.6543 1897.1548 L
2593.4102 1942.3096 L
2673.4902 1923.2207 2749.6953 1901.8418 2821.0254 1878.1685 c
2899.3242 1852.1836 2972.709 1823.1104 3039.416 1790.9189 c
3113.8984 1754.9722 3181.0039 1714.6729 3237.6719 1669.9551 c
3302.1953 1619.042 3354.0508 1561.7188 3387.8711 1497.9072 C
3024.7168 1480.8809 L
Bb
1 (Unnamed gradient 112) 3094.8135 1461.2041 129.7376 610.1844 1 0 0 1 0 0 Bg
-390.0741 469.2199 404.3572 336.1522 2894.7012 1294.8457 Xm
-6199.6201 7457.52 404.3572 336.1522 9094.3213 -6162.6738 Bc
-390.0741 469.2199 404.3572 336.1522 2894.7012 1294.8457 Bm
-6199.6201 7457.52 404.3572 336.1522 2504.627 1764.0654 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
3234.3359 1665.7275 m
3179.9102 1708.6738 3113.543 1749.1621 3037.0762 1786.0674 c
2972.2383 1817.3521 2898.9785 1846.6211 2819.3301 1873.0552 c
2752.2168 1895.3291 2679.1797 1916.0479 2602.0898 1934.6841 C
2615.6875 1899.0752 L
2618.6191 1891.4028 L
2610.4102 1891.7734 L
2431.1992 1899.8569 L
2469.2168 1887.7622 2504.543 1874.7104 2536.6113 1860.8984 c
2583.5352 1840.6934 2624.0938 1818.627 2657.1621 1795.3086 c
2694.0469 1769.3008 2721.7441 1741.6768 2739.4883 1713.2012 c
2759.1543 1681.6348 2766.5137 1649.3311 2761.3848 1617.1133 C
3025.8574 1486.3281 L
3379.0313 1502.8848 L
3346.9219 1560.5186 3298.2793 1615.2676 3234.3359 1665.7275 c
f
0 D
2767.2754 1620.2109 m
2771.4258 1652.4277 2763.627 1684.6494 2744.0625 1716.0488 c
2725.9355 1745.1406 2697.7402 1773.2891 2660.2676 1799.7109 c
2626.8965 1823.2402 2586.0117 1845.4932 2538.7441 1865.8457 c
2517.1484 1875.1475 2493.9629 1884.1484 2469.4961 1892.7363 C
2610.168 1886.3906 L
2618.375 1886.0205 L
2626.582 1885.6494 L
2623.6504 1893.3242 L
2620.7207 1900.9985 L
2610.7813 1927.0234 L
2684.0449 1909.0596 2753.5918 1889.1963 2817.6348 1867.9395 c
2897.0527 1841.583 2970.0938 1812.4048 3034.7363 1781.2144 c
3110.8496 1744.4785 3176.8809 1704.1992 3230.9961 1661.498 c
3291.5273 1613.7295 3338.252 1562.0771 3369.9883 1507.8525 C
3026.9961 1491.7754 L
2767.2754 1620.2109 L
f
*U
U
q
351.9365 659.0645 m
267.2095 851.917 182.4897 1044.7646 97.7622 1237.6162 c
125.3564 1174.8066 175.061 1113.0898 248.6797 1054.3223 c
329.2158 990.0342 436.7017 930.585 571.2251 878.585 c
715.4028 822.8516 886.4629 777.2744 1081.0142 744.6348 c
1283.2686 710.7061 1503.5952 691.9795 1734.7573 690.2148 C
1734.1909 18.5449 l
1551.9517 20.1455 1377.481 40.4111 1215.5796 77.6523 c
1058.5879 113.7607 917.8066 164.8232 795.877 228.1494 c
680.5747 288.0342 584.7407 357.541 508.875 433.96 c
438.4238 504.9229 386.377 580.668 351.9365 659.0645 C
h
W
n
Q
0 A
q
0 J 0 j 1 w 4 M []0 d0 XR
3401.0332 1222.0303 m
3314.5117 1029.9736 3227.9922 837.9326 3141.459 645.877 c
3105.918 566.9746 3052.4629 490.9639 2980.3105 420.0488 c
2902.5742 343.6377 2804.5742 274.542 2686.8887 215.5518 c
2562.4316 153.1582 2419.0176 103.582 2259.4512 69.5459 c
2094.9922 34.4648 1918.2344 16.9219 1734.1909 18.5449 C
1734.7573 690.2148 l
1968.249 688.4238 2191.5469 704.0967 2397.0898 735.5684 c
2594.9414 765.8623 2769.2852 809.7207 2916.4902 864.3262 c
3053.8184 915.2646 3163.7207 974.1602 3246.2051 1038.3223 c
3321.5508 1096.9268 3372.5508 1158.8066 3401.0332 1222.0303 C
h
W
n
Q
U
0 A
u
u
u
0 O
0.380392 0.764706 0.94902 0.498039 0.388235 0.192157 0.078431 Xa
0 J 0 j 1 w 4 M []0 d0 XR
2176.6367 1302.8398 m
1836.9482 1352.6797 l
1831.6641 3420.3213 l
2171.3574 3370.4814 l
2176.6367 1302.8398 L
f
U
u
0 0.709804 0.745098 0 0.960784 0.431373 0.290196 Xa
2171.3574 3370.4814 m
1831.6641 3420.3213 l
2211.8652 3474.8809 l
2551.5586 3425.042 l
2171.3574 3370.4814 L
f
U
u
2551.5586 3425.042 m
2556.8398 1357.4004 L
2176.6367 1302.8398 L
2171.3574 3370.4814 L
2551.5586 3425.042 L
Bb
1 (Unnamed gradient 17) 2364.0986 3382.5522 -90 1775.1213 1 0 0 1 0 0 Bg
-0.000078 -1775.1213 -389.4825 0.000017 2558.8398 3382.5522 Xm
-0.000387 -8850.5879 -389.4825 0.000017 2558.8398 12233.1396 Bc
-0.000063 -1443.5052 -389.4825 0.000017 2558.8398 3382.5522 Bm
-0.000014 -331.6161 -389.4825 0.000017 2558.8398 1939.0469 Bm
-0.000387 -8850.5879 -389.4825 0.000017 2558.8398 1607.4307 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
2540.8105 3412.6152 m
2182.1582 3361.1475 L
2187.3828 1315.2676 L
2546.0391 1366.7354 L
2540.8105 3412.6152 L
f
0 D
2192.7559 1321.4805 m
2187.5586 3356.4795 L
2535.4375 3406.4028 L
2540.6387 1371.4023 L
2192.7559 1321.4805 L
f
*U
U
U
u
u
0.854902 0.360784 1 0.305882 0.121569 0.384314 0.156863 Xa
1723.7456 1237.8516 m
1384.0557 1287.6914 l
1381.0581 2460.3887 l
1720.7485 2410.5483 l
1723.7456 1237.8516 L
f
U
u
0.254902 0 0.6 0 0.768627 0.921569 0.533333 Xa
1720.7485 2410.5483 m
1381.0581 2460.3887 l
1761.2617 2514.9468 l
2100.9512 2465.1118 l
1720.7485 2410.5483 L
f
U
u
2100.9512 2465.1118 m
2103.9492 1292.4102 L
1723.7456 1237.8516 L
1720.7485 2410.5483 L
2100.9512 2465.1118 L
Bb
1 (Unnamed gradient 9) 1912.3496 2461.0728 -90 972.3593 1 0 0 1 0 0 Bg
-0.000043 -972.3593 -387.2007 0.000017 2105.9492 2461.0728 Xm
-0.000365 -8360.3887 -387.2007 0.000017 2105.9492 10821.4619 Bc
-0.000043 -972.3593 -387.2007 0.000017 2105.9492 2461.0728 Bm
-0.000365 -8360.3887 -387.2007 0.000017 2105.9492 1488.7139 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
2090.2051 2452.6841 m
1731.5493 2401.2129 L
1734.4907 1250.2773 L
2093.1484 1301.7441 L
2090.2051 2452.6841 L
f
0 D
1739.8599 1256.4932 m
1736.9478 2396.5449 L
2084.834 2446.4697 L
2087.75 1306.4141 L
1739.8599 1256.4932 L
f
*U
U
U
u
u
1 0.776471 0.329412 0.188235 0 0.258824 0.427451 Xa
1270.855 1172.8574 m
931.1616 1222.6982 l
929.5259 1863.0557 l
1269.2192 1813.2134 l
1270.855 1172.8574 L
f
U
u
0.52549 0.207843 0 0 0.411765 0.686275 0.956863 Xa
1269.2192 1813.2134 m
929.5259 1863.0557 l
1309.7295 1917.6118 l
1649.4199 1867.7705 l
1269.2192 1813.2134 L
f
U
u
1649.4199 1867.7705 m
1651.0571 1227.418 L
1270.855 1172.8574 L
1269.2192 1813.2134 L
1649.4199 1867.7705 L
Bb
1 (Unnamed gradient 3) 1429.6812 1862.9453 -84.9204 510.7984 1 0 0 1 0 0 Bg
45.2259 -508.7924 -440.8672 -39.1881 1650.1152 1882.5396 Xm
695.8353 -7828.167 -440.8672 -39.1881 954.2798 9710.7061 Bc
45.2259 -508.7924 -440.8672 -39.1881 1650.1152 1882.5396 Bm
695.8353 -7828.167 -440.8672 -39.1881 1695.3413 1373.7471 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
1638.6772 1855.3428 m
1280.0181 1803.8765 L
1281.5996 1185.2852 L
1640.2588 1236.7529 L
1638.6772 1855.3428 L
f
0 D
1286.9697 1191.498 m
1285.4175 1799.208 L
1633.3066 1849.1294 L
1634.8613 1241.4209 L
1286.9697 1191.498 L
f
*U
U
U
U
1081.0142 744.6348 m
886.4629 777.2744 715.4028 822.8516 571.2251 878.585 c
436.7017 930.585 329.2158 990.0342 248.6797 1054.3223 c
175.061 1113.0898 125.3564 1174.8066 97.7622 1237.6162 C
351.9355 659.0645 L
386.377 580.668 438.4238 504.9229 508.873 433.96 c
584.7407 357.543 680.5737 288.0342 795.877 228.1514 c
917.8066 164.8262 1058.5879 113.7607 1215.5796 77.6523 c
1377.481 40.4111 1551.9517 20.1455 1734.1909 18.5449 C
1734.7573 690.2148 L
1503.5952 691.9795 1283.2686 710.7061 1081.0142 744.6348 c
Bb
1 (Unnamed gradient 9) 1748.4771 337.8057 163.7589 1354.2939 1 0 0 1 0 0 Bg
-1300.2485 378.7689 227.7385 781.787 1633.7935 -55.8828 Xm
-7938.1011 2312.4087 227.7385 781.787 9571.8945 -2368.291 Bc
-1300.2485 378.7689 227.7385 781.787 1633.7935 -55.8828 Bm
-7938.1011 2312.4087 227.7385 781.787 333.5449 322.8857 Bc
f
0 BB
u
116.5684 1518.3281 m
468.0981 1651.4648 L
747.0005 1626.2461 L
753.2793 1587.5596 777.8062 1549.6787 820.2241 1513.752 c
866.3071 1474.7168 932.6162 1438.7295 1017.2183 1407.3574 c
1107.3862 1373.9229 1215.9321 1346.6162 1338.3794 1327.1094 c
1465.2661 1306.9004 1602.8716 1295.7324 1744.2847 1294.7314 C
1358.5859 1058.082 L
1734.7573 690.2148 L
1403.3354 692.7432 1098.0015 729.749 837.9155 795.0781 c
596.9419 855.6094 410.249 936.6641 280.6855 1030.0605 c
166.437 1112.4189 101.2744 1201.1299 79.6948 1290.9082 c
61.0854 1368.335 75.3325 1444.9619 116.5684 1518.3281 C
Bb
1 (Unnamed gradient 9) 71.6514 1170.8398 0 1672.6333 1 0 0 1 0 0 Bg
1672.6333 0 0 -965.25 71.6514 1653.4648 Xm
6526.2173 0 0 -965.25 -6454.5659 1653.4648 Bc
1672.6333 0 0 -965.25 71.6514 1653.4648 Bm
6526.2173 0 0 -965.25 1744.2847 1653.4648 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
1351.0522 1050.3779 m
1341.1724 1060.0381 L
1352.9517 1067.2646 L
1706.9302 1284.4512 L
1578.8472 1286.959 1454.4746 1297.708 1336.686 1316.4688 c
1214.1274 1335.9932 1105.3828 1363.1738 1013.4722 1397.2539 c
928.0444 1428.9316 860.6816 1465.3604 813.2578 1505.5283 c
771.915 1540.5469 746.6235 1577.7549 737.9668 1616.2441 C
469.5986 1640.5068 L
124.0723 1509.6514 L
84.4238 1437.5078 73.0195 1364.7871 90.1709 1293.4277 c
111.9214 1202.9355 178.1392 1117.2695 286.9873 1038.8018 c
351.7915 992.085 430.7744 948.8047 521.7334 910.1602 c
615.5586 870.3027 722.8218 835.0977 840.5405 805.5293 c
970.7422 772.8232 1112.1528 747.3457 1260.8486 729.7959 c
1403.9741 712.9072 1554.2939 703.3232 1708.0396 701.2705 C
1351.0522 1050.3779 L
f
0 D
841.8535 810.7568 m
724.4033 840.2568 617.4072 875.3711 523.8403 915.1201 c
433.2388 953.6104 354.6104 996.6953 290.1392 1043.1709 c
182.3672 1120.8643 116.8501 1205.4844 95.4092 1294.6846 c
78.7217 1364.1123 89.6338 1434.9668 127.8438 1505.3174 C
470.3486 1635.0313 L
733.6284 1611.2256 L
743.3218 1572.9492 768.9204 1536.0225 809.7749 1501.417 c
857.6772 1460.8438 925.5801 1424.0986 1011.5981 1392.2021 c
1103.8394 1357.999 1212.9297 1330.7266 1335.8364 1311.1465 c
1448.1304 1293.2607 1566.687 1282.6221 1688.5249 1279.4785 C
1350.1338 1071.8564 L
1338.3535 1064.6279 L
1332.4644 1061.0137 L
1337.4058 1056.1836 L
1347.2856 1046.5264 L
1694.6216 706.8564 L
1545.7886 709.2744 1400.1406 718.7852 1261.4819 735.1484 c
1113.0127 752.668 971.8291 778.1055 841.8535 810.7568 c
f
*U
U
u
1358.5859 1058.082 m
1744.2847 1294.7314 L
1813.9238 1294.2295 1883.5498 1296.2197 1952.2539 1300.7324 C
2020.3604 1305.2109 2086.9531 1312.127 2151.1719 1321.4629 C
2214.2676 1330.6338 2274.5176 1342.0518 2331.1719 1355.6318 C
2386.373 1368.8672 2437.6973 1384.042 2484.5625 1401.0283 C
2529.8633 1417.4531 2569.3027 1434.959 2603.0469 1453.2305 c
2635.5313 1470.8164 2662.6074 1489.042 2684.5469 1507.6318 c
2705.6016 1525.4766 2721.8633 1543.6094 2733.6406 1561.8105 c
2744.9277 1579.2539 2752.0723 1596.7324 2755.3867 1614.0693 C
3024.7168 1480.8809 L
3387.8711 1497.9072 L
3427.2363 1423.6152 3439.2148 1346.3838 3417.9395 1268.7686 c
3393.2695 1178.793 3324.5859 1090.5078 3206.5547 1009.3496 c
3072.8184 917.3906 2882.0137 838.7549 2637.4824 781.6221 c
2374.0176 720.0645 2066.5664 687.6699 1734.7573 690.2148 C
1358.5859 1058.082 L
Bb
1 (Unnamed gradient 13) 1358.5859 1152.0723 0 2069.7627 1 0 0 1 0 0 Bg
2069.7627 0 0 -930.3994 1358.5859 1616.0693 Xm
7802.5859 0 0 -930.3994 -6444 1616.0693 Bc
2069.7627 0 0 -930.3994 1358.5859 1616.0693 Bm
7802.5859 0 0 -930.3994 3428.3486 1616.0693 Bc
f
0 BB
*u
1 D
0 0 0 0 1 1 1 Xa
3381.4883 1486.8203 m
3025.2188 1470.1182 L
3022.4375 1469.9902 L
3019.9395 1471.2256 L
2762.6465 1598.46 L
2758.3691 1584.1094 2751.6855 1569.8672 2742.6875 1555.958 c
2730.1738 1536.6123 2712.9551 1517.5859 2691.5117 1499.4111 c
2668.6621 1480.0469 2640.625 1461.3232 2608.1758 1443.7529 c
2573.4395 1424.9443 2533.0859 1407.1611 2488.2324 1390.8984 c
2441.25 1373.8711 2389.252 1358.4795 2333.6836 1345.1504 c
2277.0605 1331.5801 2216.1758 1320.0215 2152.7227 1310.7979 c
2088.6914 1301.4902 2021.4844 1294.4873 1952.959 1289.9814 c
1891.3389 1285.9326 1828.1982 1283.8809 1765.2969 1283.8809 c
1759.3291 1283.8809 1753.2852 1283.8994 1747.2935 1283.9346 C
1376.0015 1056.124 L
1739.1851 700.958 L
1749.7915 700.8857 1760.4814 700.8516 1771.0254 700.8516 c
1927.5879 700.8516 2081.0508 708.748 2227.1504 724.3213 c
2370.8301 739.6406 2508.0625 762.4502 2635.0293 792.1162 c
2754.5176 820.0313 2863.6953 853.7793 2959.5352 892.418 c
3052.4922 929.8965 3133.5469 972.2227 3200.4512 1018.2285 c
3312.9883 1095.6094 3382.6641 1180.8613 3407.5449 1271.6172 c
3426.9219 1342.2959 3418.1523 1414.666 3381.4883 1486.8203 C
f
0 D
3402.3477 1273.043 m
3377.8145 1183.5508 3308.8594 1099.3125 3197.3984 1022.667 c
3130.8223 976.8857 3050.1172 934.748 2957.5195 897.418 c
2861.9395 858.8789 2753.0254 825.2139 2633.8047 797.3613 c
2507.0547 767.7471 2370.043 744.9756 2226.5781 729.6797 c
2080.6543 714.125 1927.3818 706.2383 1771.0244 706.2383 c
1761.0791 706.2383 1751.1211 706.2666 1741.3901 706.332 C
1384.7036 1055.1465 L
1748.8003 1278.541 L
1754.3008 1278.5078 1759.8281 1278.4922 1765.2959 1278.4922 c
1828.3232 1278.4922 1891.5801 1280.5508 1953.3125 1284.6055 c
2021.9863 1289.1211 2089.3379 1296.1396 2153.4961 1305.4658 c
2217.127 1314.7168 2278.1719 1326.3066 2334.9395 1339.9141 c
2390.6973 1353.2852 2442.8926 1368.7344 2490.0684 1385.8311 c
2535.1777 1402.1895 2575.7773 1420.084 2610.7422 1439.0176 c
2643.5234 1456.7686 2671.873 1475.7051 2694.9941 1495.3018 c
2716.8418 1513.8154 2734.4082 1533.2383 2747.2109 1553.0322 c
2755.1953 1565.376 2761.4551 1578.0732 2765.8633 1590.8594 C
3017.5508 1466.3984 L
3020.0449 1465.1611 L
3021.293 1464.543 L
3022.6816 1464.6084 L
3025.4668 1464.7344 L
3378.2461 1481.2734 L
3412.9668 1411.3896 3421.0781 1341.3525 3402.3477 1273.043 c
f
*U
U
3246.2051 1038.3223 m
3163.7207 974.1602 3053.8223 915.2646 2916.4902 864.3262 c
2769.2852 809.7207 2594.9414 765.8623 2397.0898 735.5684 c
2191.5469 704.0967 1968.249 688.4238 1734.7573 690.2148 C
1734.1909 18.5449 L
1918.2344 16.9219 2094.9922 34.4648 2259.4512 69.5459 c
2419.0176 103.582 2562.4316 153.1582 2686.8887 215.5518 c
2804.5742 274.542 2902.5742 343.6377 2980.3105 420.0488 c
3052.4629 490.9639 3105.918 566.9746 3141.459 645.877 C
3401.0332 1222.0303 L
3372.5508 1158.8066 3321.5508 1096.9307 3246.2051 1038.3223 c
Bb
1 (Unnamed gradient 13) 3029.7646 679.4033 -170.2002 1262.1306 1 0 0 1 0 0 Bg
-1243.7141 -214.8229 -162.0265 938.05 3111.1953 207.9609 Xm
-9787.0518 -1690.4869 -162.0265 938.05 12898.2461 1898.4478 Bc
-1243.7141 -214.8229 -162.0265 938.05 3111.1953 207.9609 Bm
-9787.0518 -1690.4869 -162.0265 938.05 1867.4814 -6.8623 Bc
f
0 BB
U
LB
%AI5_EndLayer--
%AI3_BeginCrops
userdict /AI3_noCropMarks known not {
0 A
u
u
0 R
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 XS
0 J 0 j 0.5 w 4 M []0 d0 XR
-9 0 m
-36 0 L
S
0 -9 m
0 -36 L
S
U
u
-9 3500 m
-36 3500 L
S
0 3509 m
0 3536 L
S
U
u
3509 3500 m
3536 3500 L
S
3500 3509 m
3500 3536 L
S
U
u
3509 0 m
3536 0 L
S
3500 -9 m
3500 -36 L
S
U
U
} if
%AI3_EndCrops
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
